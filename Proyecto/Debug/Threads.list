
Threads.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004608  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08004718  08004718  00014718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048c4  080048c4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080048c4  080048c4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080048c4  080048c4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048c4  080048c4  000148c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048c8  080048c8  000148c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080048cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001088  20000078  08004944  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001100  08004944  00021100  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cc5  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a52  00000000  00000000  00030d66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  000337b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  00034730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c91  00000000  00000000  00035580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fff7  00000000  00000000  0004e211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091d74  00000000  00000000  0005e208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eff7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004268  00000000  00000000  000effcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08004700 	.word	0x08004700

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08004700 	.word	0x08004700

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000094 	.word	0x20000094
 800017c:	20000148 	.word	0x20000148

08000180 <LCD_Init>:
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
		{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }
};

//Funcion que inicializa el LCD a 4 bits
void LCD_Init(void){
 8000180:	b580      	push	{r7, lr}
 8000182:	b082      	sub	sp, #8
 8000184:	af00      	add	r7, sp, #0
	char const *p;

	RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;//		I/O port B clock enabled
 8000186:	4b57      	ldr	r3, [pc, #348]	; (80002e4 <LCD_Init+0x164>)
 8000188:	699b      	ldr	r3, [r3, #24]
 800018a:	4a56      	ldr	r2, [pc, #344]	; (80002e4 <LCD_Init+0x164>)
 800018c:	f043 0308 	orr.w	r3, r3, #8
 8000190:	6193      	str	r3, [r2, #24]
	RCC->APB1ENR|= RCC_APB1ENR_TIM2EN;
 8000192:	4b54      	ldr	r3, [pc, #336]	; (80002e4 <LCD_Init+0x164>)
 8000194:	69db      	ldr	r3, [r3, #28]
 8000196:	4a53      	ldr	r2, [pc, #332]	; (80002e4 <LCD_Init+0x164>)
 8000198:	f043 0301 	orr.w	r3, r3, #1
 800019c:	61d3      	str	r3, [r2, #28]

	/* Configuracion de todos los pines hacia el LCD
	/* As general purpose output push-pull, 10 MHz speed
	 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	 */
	GPIOB->CRH &= ~GPIO_CRH_CNF12 & ~GPIO_CRH_MODE12_1;
 800019e:	4b52      	ldr	r3, [pc, #328]	; (80002e8 <LCD_Init+0x168>)
 80001a0:	685b      	ldr	r3, [r3, #4]
 80001a2:	4a51      	ldr	r2, [pc, #324]	; (80002e8 <LCD_Init+0x168>)
 80001a4:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 80001a8:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_MODE12_0;
 80001aa:	4b4f      	ldr	r3, [pc, #316]	; (80002e8 <LCD_Init+0x168>)
 80001ac:	685b      	ldr	r3, [r3, #4]
 80001ae:	4a4e      	ldr	r2, [pc, #312]	; (80002e8 <LCD_Init+0x168>)
 80001b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001b4:	6053      	str	r3, [r2, #4]

	GPIOB->CRH &= ~GPIO_CRH_CNF13 & ~GPIO_CRH_MODE13_1;
 80001b6:	4b4c      	ldr	r3, [pc, #304]	; (80002e8 <LCD_Init+0x168>)
 80001b8:	685b      	ldr	r3, [r3, #4]
 80001ba:	4a4b      	ldr	r2, [pc, #300]	; (80002e8 <LCD_Init+0x168>)
 80001bc:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80001c0:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_MODE13_0;
 80001c2:	4b49      	ldr	r3, [pc, #292]	; (80002e8 <LCD_Init+0x168>)
 80001c4:	685b      	ldr	r3, [r3, #4]
 80001c6:	4a48      	ldr	r2, [pc, #288]	; (80002e8 <LCD_Init+0x168>)
 80001c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001cc:	6053      	str	r3, [r2, #4]

	GPIOB->CRH &= ~GPIO_CRH_CNF14 & ~GPIO_CRH_MODE14_1;
 80001ce:	4b46      	ldr	r3, [pc, #280]	; (80002e8 <LCD_Init+0x168>)
 80001d0:	685b      	ldr	r3, [r3, #4]
 80001d2:	4a45      	ldr	r2, [pc, #276]	; (80002e8 <LCD_Init+0x168>)
 80001d4:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80001d8:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_MODE14_0;
 80001da:	4b43      	ldr	r3, [pc, #268]	; (80002e8 <LCD_Init+0x168>)
 80001dc:	685b      	ldr	r3, [r3, #4]
 80001de:	4a42      	ldr	r2, [pc, #264]	; (80002e8 <LCD_Init+0x168>)
 80001e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80001e4:	6053      	str	r3, [r2, #4]


	GPIOB->CRH &= ~GPIO_CRH_CNF15 & ~GPIO_CRH_MODE15_1;
 80001e6:	4b40      	ldr	r3, [pc, #256]	; (80002e8 <LCD_Init+0x168>)
 80001e8:	685b      	ldr	r3, [r3, #4]
 80001ea:	4a3f      	ldr	r2, [pc, #252]	; (80002e8 <LCD_Init+0x168>)
 80001ec:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80001f0:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_MODE15_0;
 80001f2:	4b3d      	ldr	r3, [pc, #244]	; (80002e8 <LCD_Init+0x168>)
 80001f4:	685b      	ldr	r3, [r3, #4]
 80001f6:	4a3c      	ldr	r2, [pc, #240]	; (80002e8 <LCD_Init+0x168>)
 80001f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80001fc:	6053      	str	r3, [r2, #4]


	GPIOB->CRH &= ~GPIO_CRH_CNF10 & ~GPIO_CRH_MODE10_1;
 80001fe:	4b3a      	ldr	r3, [pc, #232]	; (80002e8 <LCD_Init+0x168>)
 8000200:	685b      	ldr	r3, [r3, #4]
 8000202:	4a39      	ldr	r2, [pc, #228]	; (80002e8 <LCD_Init+0x168>)
 8000204:	f423 6360 	bic.w	r3, r3, #3584	; 0xe00
 8000208:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_MODE10_0;
 800020a:	4b37      	ldr	r3, [pc, #220]	; (80002e8 <LCD_Init+0x168>)
 800020c:	685b      	ldr	r3, [r3, #4]
 800020e:	4a36      	ldr	r2, [pc, #216]	; (80002e8 <LCD_Init+0x168>)
 8000210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000214:	6053      	str	r3, [r2, #4]

	GPIOB->CRL &= ~GPIO_CRL_CNF1 & ~GPIO_CRL_MODE1_1;
 8000216:	4b34      	ldr	r3, [pc, #208]	; (80002e8 <LCD_Init+0x168>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a33      	ldr	r2, [pc, #204]	; (80002e8 <LCD_Init+0x168>)
 800021c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000220:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE1_0;
 8000222:	4b31      	ldr	r3, [pc, #196]	; (80002e8 <LCD_Init+0x168>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a30      	ldr	r2, [pc, #192]	; (80002e8 <LCD_Init+0x168>)
 8000228:	f043 0310 	orr.w	r3, r3, #16
 800022c:	6013      	str	r3, [r2, #0]


	GPIOB->CRL &= ~GPIO_CRL_CNF0 & ~GPIO_CRL_MODE0_1;
 800022e:	4b2e      	ldr	r3, [pc, #184]	; (80002e8 <LCD_Init+0x168>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a2d      	ldr	r2, [pc, #180]	; (80002e8 <LCD_Init+0x168>)
 8000234:	f023 030e 	bic.w	r3, r3, #14
 8000238:	6013      	str	r3, [r2, #0]
	GPIOB->CRL |= GPIO_CRL_MODE0_0;
 800023a:	4b2b      	ldr	r3, [pc, #172]	; (80002e8 <LCD_Init+0x168>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	4a2a      	ldr	r2, [pc, #168]	; (80002e8 <LCD_Init+0x168>)
 8000240:	f043 0301 	orr.w	r3, r3, #1
 8000244:	6013      	str	r3, [r2, #0]

	/*
	 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	 */

	GPIOB->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8000246:	4b28      	ldr	r3, [pc, #160]	; (80002e8 <LCD_Init+0x168>)
 8000248:	4a28      	ldr	r2, [pc, #160]	; (80002ec <LCD_Init+0x16c>)
 800024a:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	USER_TIM2_DELAY_15s();//		delay of 15ms
 800024c:	f000 f854 	bl	80002f8 <USER_TIM2_DELAY_15s>

	GPIOB->BSRR	 =	1U << LCD_D4_PIN_HIGH
 8000250:	4b25      	ldr	r3, [pc, #148]	; (80002e8 <LCD_Init+0x168>)
 8000252:	4a26      	ldr	r2, [pc, #152]	; (80002ec <LCD_Init+0x16c>)
 8000254:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000256:	f000 faab 	bl	80007b0 <LCD_Pulse_EN>
	USER_TIM2_DELAY_4_1ms();//		delay of 4.1ms
 800025a:	f000 f89e 	bl	800039a <USER_TIM2_DELAY_4_1ms>

	GPIOB->BSRR	 =	1U << LCD_D4_PIN_HIGH
 800025e:	4b22      	ldr	r3, [pc, #136]	; (80002e8 <LCD_Init+0x168>)
 8000260:	4a22      	ldr	r2, [pc, #136]	; (80002ec <LCD_Init+0x16c>)
 8000262:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000264:	f000 faa4 	bl	80007b0 <LCD_Pulse_EN>
	USER_TIM2_DELAY_100us();//      delay of 100us
 8000268:	f000 f8e8 	bl	800043c <USER_TIM2_DELAY_100us>

	GPIOB->BSRR	 =	1U << LCD_D4_PIN_HIGH
 800026c:	4b1e      	ldr	r3, [pc, #120]	; (80002e8 <LCD_Init+0x168>)
 800026e:	4a1f      	ldr	r2, [pc, #124]	; (80002ec <LCD_Init+0x16c>)
 8000270:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000272:	f000 fa9d 	bl	80007b0 <LCD_Pulse_EN>

	while( LCD_Busy( ) );//						espera a que el LCD este operativo
 8000276:	bf00      	nop
 8000278:	f000 fa58 	bl	800072c <LCD_Busy>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d1fa      	bne.n	8000278 <LCD_Init+0xf8>
	GPIOB->BSRR	 =	1U << LCD_D4_PIN_LOW
 8000282:	4b19      	ldr	r3, [pc, #100]	; (80002e8 <LCD_Init+0x168>)
 8000284:	4a1a      	ldr	r2, [pc, #104]	; (80002f0 <LCD_Init+0x170>)
 8000286:	611a      	str	r2, [r3, #16]
				|	1U << LCD_D5_PIN_HIGH
				|	1U << LCD_D6_PIN_LOW
				|	1U << LCD_D7_PIN_LOW;
	LCD_Pulse_EN( );
 8000288:	f000 fa92 	bl	80007b0 <LCD_Pulse_EN>

	while( LCD_Busy( ) );//						espera a que se complete
 800028c:	bf00      	nop
 800028e:	f000 fa4d 	bl	800072c <LCD_Busy>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d1fa      	bne.n	800028e <LCD_Init+0x10e>
	LCD_Write_Cmd( 0x28U );//					establecemos LCD como: datos 4-bit, #lineas=2, font=5x7 dots
 8000298:	2028      	movs	r0, #40	; 0x28
 800029a:	f000 f9d7 	bl	800064c <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x0CU );//					enciende el LCD sin cursor
 800029e:	200c      	movs	r0, #12
 80002a0:	f000 f9d4 	bl	800064c <LCD_Write_Cmd>
	LCD_Write_Cmd( 0x06U );//					inicializa cursor
 80002a4:	2006      	movs	r0, #6
 80002a6:	f000 f9d1 	bl	800064c <LCD_Write_Cmd>

	//Cargamos el caracter definido por el usuario en la CGRAM
	LCD_Write_Cmd( 0x40 );//					establece la direccion CGRAM desde 0
 80002aa:	2040      	movs	r0, #64	; 0x40
 80002ac:	f000 f9ce 	bl	800064c <LCD_Write_Cmd>
	p = &UserFont[0][0];
 80002b0:	4b10      	ldr	r3, [pc, #64]	; (80002f4 <LCD_Init+0x174>)
 80002b2:	607b      	str	r3, [r7, #4]

	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 80002b4:	2300      	movs	r3, #0
 80002b6:	603b      	str	r3, [r7, #0]
 80002b8:	e00a      	b.n	80002d0 <LCD_Init+0x150>
		LCD_Put_Char( *p );
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 f9d8 	bl	8000674 <LCD_Put_Char>
	for( int i = 0; i < sizeof( UserFont ); i++, p++ )
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	3301      	adds	r3, #1
 80002c8:	603b      	str	r3, [r7, #0]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	3301      	adds	r3, #1
 80002ce:	607b      	str	r3, [r7, #4]
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	2b3f      	cmp	r3, #63	; 0x3f
 80002d4:	d9f1      	bls.n	80002ba <LCD_Init+0x13a>

	LCD_Write_Cmd( 0x80 );
 80002d6:	2080      	movs	r0, #128	; 0x80
 80002d8:	f000 f9b8 	bl	800064c <LCD_Write_Cmd>
}
 80002dc:	bf00      	nop
 80002de:	3708      	adds	r7, #8
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40021000 	.word	0x40021000
 80002e8:	40010c00 	.word	0x40010c00
 80002ec:	c0003000 	.word	0xc0003000
 80002f0:	d0002000 	.word	0xd0002000
 80002f4:	0800480c 	.word	0x0800480c

080002f8 <USER_TIM2_DELAY_15s>:
void USER_TIM2_DELAY_15s(void){
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
	TIM2->SMCR &= ~TIM_SMCR_ECE
 80002fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000306:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800030a:	f023 0307 	bic.w	r3, r3, #7
 800030e:	6093      	str	r3, [r2, #8]
			   & ~TIM_SMCR_SMS;

	TIM2->CR1  &= ~TIM_CR1_CMS
 8000310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800031a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800031e:	6013      	str	r3, [r2, #0]
			   & ~TIM_CR1_DIR
			   & ~TIM_CR1_URS
			   & ~TIM_CR1_UDIS
			   & ~TIM_CR1_CEN;

	TIM2->CR1 |= TIM_CR1_ARPE;
 8000320:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800032a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800032e:	6013      	str	r3, [r2, #0]
	TIM2->PSC = 16U;
 8000330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000334:	2210      	movs	r2, #16
 8000336:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 63528U;
 8000338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800033c:	f64f 0228 	movw	r2, #63528	; 0xf828
 8000340:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 8000342:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	6153      	str	r3, [r2, #20]
	TIM2->SR &= ~TIM_SR_UIF;
 8000352:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000356:	691b      	ldr	r3, [r3, #16]
 8000358:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800035c:	f023 0301 	bic.w	r3, r3, #1
 8000360:	6113      	str	r3, [r2, #16]
	TIM2->CR1 |= TIM_CR1_CEN;
 8000362:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800036c:	f043 0301 	orr.w	r3, r3, #1
 8000370:	6013      	str	r3, [r2, #0]
	while ((TIM2->SR & TIM_SR_UIF)==0){
 8000372:	bf00      	nop
 8000374:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000378:	691b      	ldr	r3, [r3, #16]
 800037a:	f003 0301 	and.w	r3, r3, #1
 800037e:	2b00      	cmp	r3, #0
 8000380:	d0f8      	beq.n	8000374 <USER_TIM2_DELAY_15s+0x7c>

	}
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8000382:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800038c:	f023 0301 	bic.w	r3, r3, #1
 8000390:	6013      	str	r3, [r2, #0]
}
 8000392:	bf00      	nop
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr

0800039a <USER_TIM2_DELAY_4_1ms>:

void USER_TIM2_DELAY_4_1ms(void){
 800039a:	b480      	push	{r7}
 800039c:	af00      	add	r7, sp, #0
	TIM2->SMCR &= ~TIM_SMCR_ECE
 800039e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003a2:	689b      	ldr	r3, [r3, #8]
 80003a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80003ac:	f023 0307 	bic.w	r3, r3, #7
 80003b0:	6093      	str	r3, [r2, #8]
			   & ~TIM_SMCR_SMS;

	TIM2->CR1  &= ~TIM_CR1_CMS
 80003b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003bc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80003c0:	6013      	str	r3, [r2, #0]
			   & ~TIM_CR1_DIR
			   & ~TIM_CR1_URS
			   & ~TIM_CR1_UDIS
			   & ~TIM_CR1_CEN;

	TIM2->CR1 |= TIM_CR1_ARPE;
 80003c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d0:	6013      	str	r3, [r2, #0]
	TIM2->PSC = 4U;
 80003d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003d6:	2204      	movs	r2, #4
 80003d8:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 59039U;
 80003da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003de:	f24e 629f 	movw	r2, #59039	; 0xe69f
 80003e2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 80003e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ee:	f043 0301 	orr.w	r3, r3, #1
 80003f2:	6153      	str	r3, [r2, #20]
	TIM2->SR &= ~TIM_SR_UIF;
 80003f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f8:	691b      	ldr	r3, [r3, #16]
 80003fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003fe:	f023 0301 	bic.w	r3, r3, #1
 8000402:	6113      	str	r3, [r2, #16]
	TIM2->CR1 |= TIM_CR1_CEN;
 8000404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800040e:	f043 0301 	orr.w	r3, r3, #1
 8000412:	6013      	str	r3, [r2, #0]
	while ((TIM2->SR & TIM_SR_UIF)==0){
 8000414:	bf00      	nop
 8000416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800041a:	691b      	ldr	r3, [r3, #16]
 800041c:	f003 0301 	and.w	r3, r3, #1
 8000420:	2b00      	cmp	r3, #0
 8000422:	d0f8      	beq.n	8000416 <USER_TIM2_DELAY_4_1ms+0x7c>

	}
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8000424:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800042e:	f023 0301 	bic.w	r3, r3, #1
 8000432:	6013      	str	r3, [r2, #0]
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr

0800043c <USER_TIM2_DELAY_100us>:
void USER_TIM2_DELAY_100us(void){
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
	TIM2->SMCR &= ~TIM_SMCR_ECE
 8000440:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000444:	689b      	ldr	r3, [r3, #8]
 8000446:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800044a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800044e:	f023 0307 	bic.w	r3, r3, #7
 8000452:	6093      	str	r3, [r2, #8]
			   & ~TIM_SMCR_SMS;

	TIM2->CR1  &= ~TIM_CR1_CMS
 8000454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800045e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8000462:	6013      	str	r3, [r2, #0]
			   & ~TIM_CR1_DIR
			   & ~TIM_CR1_URS
			   & ~TIM_CR1_UDIS
			   & ~TIM_CR1_CEN;

	TIM2->CR1 |= TIM_CR1_ARPE;
 8000464:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800046e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000472:	6013      	str	r3, [r2, #0]
	TIM2->PSC = 0U;
 8000474:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000478:	2200      	movs	r2, #0
 800047a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 7199U;
 800047c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000480:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000484:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 8000486:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800048a:	695b      	ldr	r3, [r3, #20]
 800048c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6153      	str	r3, [r2, #20]
	TIM2->SR &= ~TIM_SR_UIF;
 8000496:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800049a:	691b      	ldr	r3, [r3, #16]
 800049c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004a0:	f023 0301 	bic.w	r3, r3, #1
 80004a4:	6113      	str	r3, [r2, #16]
	TIM2->CR1 |= TIM_CR1_CEN;
 80004a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	6013      	str	r3, [r2, #0]
	while ((TIM2->SR & TIM_SR_UIF)==0){
 80004b6:	bf00      	nop
 80004b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004bc:	691b      	ldr	r3, [r3, #16]
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d0f8      	beq.n	80004b8 <USER_TIM2_DELAY_100us+0x7c>

	}
	TIM2->CR1 &= ~TIM_CR1_CEN;
 80004c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004d0:	f023 0301 	bic.w	r3, r3, #1
 80004d4:	6013      	str	r3, [r2, #0]
}
 80004d6:	bf00      	nop
 80004d8:	46bd      	mov	sp, r7
 80004da:	bc80      	pop	{r7}
 80004dc:	4770      	bx	lr

080004de <USER_TIM2_DELAY_50us>:
void USER_TIM2_DELAY_50us(void){
 80004de:	b480      	push	{r7}
 80004e0:	af00      	add	r7, sp, #0
	TIM2->SMCR &= ~TIM_SMCR_ECE
 80004e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004e6:	689b      	ldr	r3, [r3, #8]
 80004e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80004f0:	f023 0307 	bic.w	r3, r3, #7
 80004f4:	6093      	str	r3, [r2, #8]
			   & ~TIM_SMCR_SMS;

	TIM2->CR1  &= ~TIM_CR1_CMS
 80004f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000500:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8000504:	6013      	str	r3, [r2, #0]
			   & ~TIM_CR1_DIR
			   & ~TIM_CR1_URS
			   & ~TIM_CR1_UDIS
			   & ~TIM_CR1_CEN;

	TIM2->CR1 |= TIM_CR1_ARPE;
 8000506:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000514:	6013      	str	r3, [r2, #0]
	TIM2->PSC = 0U;
 8000516:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800051a:	2200      	movs	r2, #0
 800051c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 3599U;
 800051e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000522:	f640 620f 	movw	r2, #3599	; 0xe0f
 8000526:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->EGR |= TIM_EGR_UG;
 8000528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	6153      	str	r3, [r2, #20]
	TIM2->SR &= ~TIM_SR_UIF;
 8000538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800053c:	691b      	ldr	r3, [r3, #16]
 800053e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000542:	f023 0301 	bic.w	r3, r3, #1
 8000546:	6113      	str	r3, [r2, #16]
	TIM2->CR1 |= TIM_CR1_CEN;
 8000548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000552:	f043 0301 	orr.w	r3, r3, #1
 8000556:	6013      	str	r3, [r2, #0]
	while ((TIM2->SR & TIM_SR_UIF)==0){
 8000558:	bf00      	nop
 800055a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800055e:	691b      	ldr	r3, [r3, #16]
 8000560:	f003 0301 	and.w	r3, r3, #1
 8000564:	2b00      	cmp	r3, #0
 8000566:	d0f8      	beq.n	800055a <USER_TIM2_DELAY_50us+0x7c>

	}
	TIM2->CR1 &= ~TIM_CR1_CEN;
 8000568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000572:	f023 0301 	bic.w	r3, r3, #1
 8000576:	6013      	str	r3, [r2, #0]
}
 8000578:	bf00      	nop
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr

08000580 <LCD_Out_Data4>:
//Funcion que genera un strobe en el LCD
void LCD_Out_Data4(unsigned char val){
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
	if( ( val & 0x01U ) == 0x01U )//						Bit[0]
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	f003 0301 	and.w	r3, r3, #1
 8000590:	2b00      	cmp	r3, #0
 8000592:	d004      	beq.n	800059e <LCD_Out_Data4+0x1e>
		GPIOB->BSRR	=	1U << LCD_D4_PIN_HIGH;
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <LCD_Out_Data4+0x84>)
 8000596:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800059a:	611a      	str	r2, [r3, #16]
 800059c:	e003      	b.n	80005a6 <LCD_Out_Data4+0x26>
	else
		GPIOB->BSRR	=	1U << LCD_D4_PIN_LOW;
 800059e:	4b19      	ldr	r3, [pc, #100]	; (8000604 <LCD_Out_Data4+0x84>)
 80005a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005a4:	611a      	str	r2, [r3, #16]

	if( ( val & 0x02U ) == 0x02U )//						Bit[1]
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	f003 0302 	and.w	r3, r3, #2
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d004      	beq.n	80005ba <LCD_Out_Data4+0x3a>
		GPIOB->BSRR	=	1U << LCD_D5_PIN_HIGH;
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <LCD_Out_Data4+0x84>)
 80005b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005b6:	611a      	str	r2, [r3, #16]
 80005b8:	e003      	b.n	80005c2 <LCD_Out_Data4+0x42>
	else
		GPIOB->BSRR	=	1U << LCD_D5_PIN_LOW;
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <LCD_Out_Data4+0x84>)
 80005bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80005c0:	611a      	str	r2, [r3, #16]

	if( ( val & 0x04U ) == 0x04U )//						Bit[2]
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f003 0304 	and.w	r3, r3, #4
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d004      	beq.n	80005d6 <LCD_Out_Data4+0x56>
		GPIOB->BSRR	=	1U << LCD_D6_PIN_HIGH;
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <LCD_Out_Data4+0x84>)
 80005ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005d2:	611a      	str	r2, [r3, #16]
 80005d4:	e003      	b.n	80005de <LCD_Out_Data4+0x5e>
	else
		GPIOB->BSRR	=	1U << LCD_D6_PIN_LOW;
 80005d6:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <LCD_Out_Data4+0x84>)
 80005d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005dc:	611a      	str	r2, [r3, #16]

	if( ( val & 0x08U ) == 0x08U )//						Bit[3]
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	f003 0308 	and.w	r3, r3, #8
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d004      	beq.n	80005f2 <LCD_Out_Data4+0x72>
		GPIOB->BSRR	=	1U << LCD_D7_PIN_HIGH;
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <LCD_Out_Data4+0x84>)
 80005ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005ee:	611a      	str	r2, [r3, #16]
	else
		GPIOB->BSRR	=	1U << LCD_D7_PIN_LOW;
}
 80005f0:	e003      	b.n	80005fa <LCD_Out_Data4+0x7a>
		GPIOB->BSRR	=	1U << LCD_D7_PIN_LOW;
 80005f2:	4b04      	ldr	r3, [pc, #16]	; (8000604 <LCD_Out_Data4+0x84>)
 80005f4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80005f8:	611a      	str	r2, [r3, #16]
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	bc80      	pop	{r7}
 8000602:	4770      	bx	lr
 8000604:	40010c00 	.word	0x40010c00

08000608 <LCD_Write_Byte>:

//Funcion que escribe 1 byte de datos en el LCD
void LCD_Write_Byte(unsigned char val){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	LCD_Out_Data4( ( val >> 4 ) & 0x0FU );
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	091b      	lsrs	r3, r3, #4
 8000616:	b2db      	uxtb	r3, r3
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff ffb1 	bl	8000580 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 800061e:	f000 f8c7 	bl	80007b0 <LCD_Pulse_EN>

	LCD_Out_Data4( val & 0x0FU );
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	f003 030f 	and.w	r3, r3, #15
 8000628:	b2db      	uxtb	r3, r3
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff ffa8 	bl	8000580 <LCD_Out_Data4>
	LCD_Pulse_EN( );
 8000630:	f000 f8be 	bl	80007b0 <LCD_Pulse_EN>

	while( LCD_Busy( ) );
 8000634:	bf00      	nop
 8000636:	f000 f879 	bl	800072c <LCD_Busy>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1fa      	bne.n	8000636 <LCD_Write_Byte+0x2e>
}
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <LCD_Write_Cmd>:

//Funcion que escribe un comando en el LCD
void LCD_Write_Cmd(unsigned char val){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR	=	1U << LCD_RS_PIN_LOW;//					RS=0 (seleccion de comando)
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <LCD_Write_Cmd+0x24>)
 8000658:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800065c:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( val );
 800065e:	79fb      	ldrb	r3, [r7, #7]
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ffd1 	bl	8000608 <LCD_Write_Byte>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40010c00 	.word	0x40010c00

08000674 <LCD_Put_Char>:

//Escribe un caracter ASCII en el LCD
void LCD_Put_Char(unsigned char c){
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR	=	1U << LCD_RS_PIN_HIGH;//				RS=1 (seleccion de caracteres)
 800067e:	4b05      	ldr	r3, [pc, #20]	; (8000694 <LCD_Put_Char+0x20>)
 8000680:	2201      	movs	r2, #1
 8000682:	611a      	str	r2, [r3, #16]
	LCD_Write_Byte( c );
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	4618      	mov	r0, r3
 8000688:	f7ff ffbe 	bl	8000608 <LCD_Write_Byte>
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40010c00 	.word	0x40010c00

08000698 <LCD_Set_Cursor>:

//Funcion que establece el cursor en una posicion de la pantalla del LCD
void LCD_Set_Cursor(unsigned char line, unsigned char column){
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	460a      	mov	r2, r1
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71bb      	strb	r3, [r7, #6]
	unsigned char address;
	if( column != 0 )
 80006a8:	79bb      	ldrb	r3, [r7, #6]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d002      	beq.n	80006b4 <LCD_Set_Cursor+0x1c>
		column--;
 80006ae:	79bb      	ldrb	r3, [r7, #6]
 80006b0:	3b01      	subs	r3, #1
 80006b2:	71bb      	strb	r3, [r7, #6]
	if( line != 0 )
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d002      	beq.n	80006c0 <LCD_Set_Cursor+0x28>
		line--;
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	3b01      	subs	r3, #1
 80006be:	71fb      	strb	r3, [r7, #7]
	address = ( line * 40 ) + column;
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	461a      	mov	r2, r3
 80006c4:	0092      	lsls	r2, r2, #2
 80006c6:	4413      	add	r3, r2
 80006c8:	00db      	lsls	r3, r3, #3
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	4413      	add	r3, r2
 80006d0:	73fb      	strb	r3, [r7, #15]
	address = 0x80U + ( address & 0x7FU );
 80006d2:	7bfb      	ldrb	r3, [r7, #15]
 80006d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	3b80      	subs	r3, #128	; 0x80
 80006dc:	73fb      	strb	r3, [r7, #15]
	LCD_Write_Cmd( address );
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff ffb3 	bl	800064c <LCD_Write_Cmd>
}
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}

080006ee <LCD_Put_Str>:

//Funcion que envia una cadena de caracteres ASCII al LCD
void LCD_Put_Str(char* str){
 80006ee:	b580      	push	{r7, lr}
 80006f0:	b084      	sub	sp, #16
 80006f2:	af00      	add	r7, sp, #0
 80006f4:	6078      	str	r0, [r7, #4]
	for( int i = 0; i < 16 && str[ i ] != 0; i++ )
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	e009      	b.n	8000710 <LCD_Put_Str+0x22>
		LCD_Put_Char( str[ i ] );//							envia 1 byte al LCD
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ffb5 	bl	8000674 <LCD_Put_Char>
	for( int i = 0; i < 16 && str[ i ] != 0; i++ )
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	3301      	adds	r3, #1
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	2b0f      	cmp	r3, #15
 8000714:	dc05      	bgt.n	8000722 <LCD_Put_Str+0x34>
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	687a      	ldr	r2, [r7, #4]
 800071a:	4413      	add	r3, r2
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d1ec      	bne.n	80006fc <LCD_Put_Str+0xe>
}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <LCD_Busy>:
			LCD_Put_Char( ch[ i ] );
	}
}

//Funcion que provoca tiempos de espera en el LCD
char LCD_Busy(void){
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	/* Configuracion de PB15_D7 as input floating
	 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	 */
	GPIOB->CRH &= ~GPIO_CRH_CNF15_1 & ~GPIO_CRH_MODE15;
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <LCD_Busy+0x78>)
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <LCD_Busy+0x78>)
 8000736:	f023 4330 	bic.w	r3, r3, #2952790016	; 0xb0000000
 800073a:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= GPIO_CRH_CNF15_0;
 800073c:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <LCD_Busy+0x78>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <LCD_Busy+0x78>)
 8000742:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000746:	6053      	str	r3, [r2, #4]

	/*
	 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	 */

	GPIOB->BSRR	 =	1U << LCD_RS_PIN_LOW
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <LCD_Busy+0x78>)
 800074a:	4a17      	ldr	r2, [pc, #92]	; (80007a8 <LCD_Busy+0x7c>)
 800074c:	611a      	str	r2, [r3, #16]
				|	1U << LCD_RW_PIN_HIGH
				|	1U << LCD_EN_PIN_HIGH;

	USER_TIM2_DELAY_100us();//					delay of 100us
 800074e:	f7ff fe75 	bl	800043c <USER_TIM2_DELAY_100us>
	if( ( GPIOB->IDR & 0x00008000U ) ){//					if PB15_D7 is set, then
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <LCD_Busy+0x78>)
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800075a:	2b00      	cmp	r3, #0
 800075c:	d010      	beq.n	8000780 <LCD_Busy+0x54>
		GPIOB->BSRR	 =	1U << LCD_RW_PIN_LOW
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <LCD_Busy+0x78>)
 8000760:	4a12      	ldr	r2, [pc, #72]	; (80007ac <LCD_Busy+0x80>)
 8000762:	611a      	str	r2, [r3, #16]

		/* Configuracion de PB15_D7 as output push-pull, 10 MHz speed
		 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		 */

		GPIOB->CRH &= ~GPIO_CRH_CNF15 & ~GPIO_CRH_MODE15_1;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <LCD_Busy+0x78>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	4a0e      	ldr	r2, [pc, #56]	; (80007a4 <LCD_Busy+0x78>)
 800076a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 800076e:	6053      	str	r3, [r2, #4]
		GPIOB->CRH |= GPIO_CRH_MODE15_0;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <LCD_Busy+0x78>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	4a0b      	ldr	r2, [pc, #44]	; (80007a4 <LCD_Busy+0x78>)
 8000776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800077a:	6053      	str	r3, [r2, #4]
		/*
		 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		 */

		return 1;
 800077c:	2301      	movs	r3, #1
 800077e:	e00f      	b.n	80007a0 <LCD_Busy+0x74>
	} else {
		GPIOB->BSRR	 =	1U << LCD_RW_PIN_LOW
 8000780:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <LCD_Busy+0x78>)
 8000782:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <LCD_Busy+0x80>)
 8000784:	611a      	str	r2, [r3, #16]
					|	1U << LCD_EN_PIN_LOW;

		/* Configuracion de PB15_D7 as output push-pull, 10 MHz speed
		 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		 */
		GPIOB->CRH &= ~GPIO_CRH_CNF15 & ~GPIO_CRH_MODE15_1;
 8000786:	4b07      	ldr	r3, [pc, #28]	; (80007a4 <LCD_Busy+0x78>)
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	4a06      	ldr	r2, [pc, #24]	; (80007a4 <LCD_Busy+0x78>)
 800078c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000790:	6053      	str	r3, [r2, #4]
		GPIOB->CRH |= GPIO_CRH_MODE15_0;
 8000792:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <LCD_Busy+0x78>)
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	4a03      	ldr	r2, [pc, #12]	; (80007a4 <LCD_Busy+0x78>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6053      	str	r3, [r2, #4]
		/*
		 * ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
		 */

		return 0;
 800079e:	2300      	movs	r3, #0
	}
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40010c00 	.word	0x40010c00
 80007a8:	00010402 	.word	0x00010402
 80007ac:	04020000 	.word	0x04020000

080007b0 <LCD_Pulse_EN>:

//Funcion que genera un pulso en el pin EN del LCD
void LCD_Pulse_EN(void){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	GPIOB->BSRR	=	1U << LCD_EN_PIN_HIGH;//				habilita pin EN ON
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <LCD_Pulse_EN+0x1c>)
 80007b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007ba:	611a      	str	r2, [r3, #16]
	USER_TIM2_DELAY_50us();//				delay of 50us
 80007bc:	f7ff fe8f 	bl	80004de <USER_TIM2_DELAY_50us>
	GPIOB->BSRR	=	1U << LCD_EN_PIN_LOW;//					habilita pin EN OFF
 80007c0:	4b02      	ldr	r3, [pc, #8]	; (80007cc <LCD_Pulse_EN+0x1c>)
 80007c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80007c6:	611a      	str	r2, [r3, #16]
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40010c00 	.word	0x40010c00

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b5b0      	push	{r4, r5, r7, lr}
 80007d2:	b0a4      	sub	sp, #144	; 0x90
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d6:	f000 fcbd 	bl	8001154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007da:	f000 f895 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007de:	f000 f8d9 	bl	8000994 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  USER_RCC_Init( );
 80007e2:	f000 f8f9 	bl	80009d8 <USER_RCC_Init>
  USER_GPIO_Init( );
 80007e6:	f000 f90d 	bl	8000a04 <USER_GPIO_Init>
  USER_USART1_Init();
 80007ea:	f000 f9a3 	bl	8000b34 <USER_USART1_Init>

  LCD_Init( );//				inicializamos la libreria del LCD
 80007ee:	f7ff fcc7 	bl	8000180 <LCD_Init>
  LCD_Cursor_ON( );//			cursor visible activo
 80007f2:	200e      	movs	r0, #14
 80007f4:	f7ff ff2a 	bl	800064c <LCD_Write_Cmd>
  LCD_Clear( );//			borra la pantalla
 80007f8:	2001      	movs	r0, #1
 80007fa:	f7ff ff27 	bl	800064c <LCD_Write_Cmd>
  LCD_Set_Cursor( 1, 0 );//		posiciona cursor en la fila 1 columna 0
 80007fe:	2100      	movs	r1, #0
 8000800:	2001      	movs	r0, #1
 8000802:	f7ff ff49 	bl	8000698 <LCD_Set_Cursor>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  osMessageQDef(MsgQueueHandle, 1, int);
 8000806:	4b35      	ldr	r3, [pc, #212]	; (80008dc <main+0x10c>)
 8000808:	f107 0480 	add.w	r4, r7, #128	; 0x80
 800080c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800080e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  MsgQueueHandle = osMessageCreate(osMessageQ(MsgQueueHandle), NULL);
 8000812:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000816:	2100      	movs	r1, #0
 8000818:	4618      	mov	r0, r3
 800081a:	f001 fce0 	bl	80021de <osMessageCreate>
 800081e:	4603      	mov	r3, r0
 8000820:	4a2f      	ldr	r2, [pc, #188]	; (80008e0 <main+0x110>)
 8000822:	6013      	str	r3, [r2, #0]

  osMessageQDef(MsgQueueHandle1, 1, int);
 8000824:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <main+0x10c>)
 8000826:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800082a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800082c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  MsgQueueHandle1 = osMessageCreate(osMessageQ(MsgQueueHandle1), NULL);
 8000830:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f001 fcd1 	bl	80021de <osMessageCreate>
 800083c:	4603      	mov	r3, r0
 800083e:	4a29      	ldr	r2, [pc, #164]	; (80008e4 <main+0x114>)
 8000840:	6013      	str	r3, [r2, #0]
  /* definition and creation of defaultTask */

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* Create the task, storing the handle. */
  osThreadDef(sTaskHandle, senderTask, osPriorityAboveNormal, 0, 128);
 8000842:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <main+0x118>)
 8000844:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000848:	461d      	mov	r5, r3
 800084a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800084c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800084e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000852:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sTaskHandle = osThreadCreate(osThread(sTaskHandle), NULL);
 8000856:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f001 fc5e 	bl	800211e <osThreadCreate>
 8000862:	4603      	mov	r3, r0
 8000864:	4a21      	ldr	r2, [pc, #132]	; (80008ec <main+0x11c>)
 8000866:	6013      	str	r3, [r2, #0]

  osThreadDef(rTaskHandle, receiverTask, osPriorityAboveNormal, 0, 128);
 8000868:	4b21      	ldr	r3, [pc, #132]	; (80008f0 <main+0x120>)
 800086a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800086e:	461d      	mov	r5, r3
 8000870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000874:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000878:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  rTaskHandle = osThreadCreate(osThread(rTaskHandle), NULL);
 800087c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f001 fc4b 	bl	800211e <osThreadCreate>
 8000888:	4603      	mov	r3, r0
 800088a:	4a1a      	ldr	r2, [pc, #104]	; (80008f4 <main+0x124>)
 800088c:	6013      	str	r3, [r2, #0]

  osThreadDef(bTaskHandle, buttonTask, osPriorityHigh, 0, 128);
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <main+0x128>)
 8000890:	f107 041c 	add.w	r4, r7, #28
 8000894:	461d      	mov	r5, r3
 8000896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800089a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800089e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  bTaskHandle = osThreadCreate(osThread(bTaskHandle), NULL);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	2100      	movs	r1, #0
 80008a8:	4618      	mov	r0, r3
 80008aa:	f001 fc38 	bl	800211e <osThreadCreate>
 80008ae:	4603      	mov	r3, r0
 80008b0:	4a12      	ldr	r2, [pc, #72]	; (80008fc <main+0x12c>)
 80008b2:	6013      	str	r3, [r2, #0]

  osThreadDef(lTaskHandle, LCDTask, osPriorityBelowNormal, 0, 128);
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <main+0x130>)
 80008b6:	463c      	mov	r4, r7
 80008b8:	461d      	mov	r5, r3
 80008ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lTaskHandle = osThreadCreate(osThread(lTaskHandle), NULL);
 80008c6:	463b      	mov	r3, r7
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 fc27 	bl	800211e <osThreadCreate>
 80008d0:	4603      	mov	r3, r0
 80008d2:	4a0c      	ldr	r2, [pc, #48]	; (8000904 <main+0x134>)
 80008d4:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80008d6:	f001 fc1b 	bl	8002110 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008da:	e7fe      	b.n	80008da <main+0x10a>
 80008dc:	08004748 	.word	0x08004748
 80008e0:	20000350 	.word	0x20000350
 80008e4:	2000035c 	.word	0x2000035c
 80008e8:	08004758 	.word	0x08004758
 80008ec:	20000348 	.word	0x20000348
 80008f0:	08004774 	.word	0x08004774
 80008f4:	2000034c 	.word	0x2000034c
 80008f8:	08004790 	.word	0x08004790
 80008fc:	20000354 	.word	0x20000354
 8000900:	080047ac 	.word	0x080047ac
 8000904:	20000358 	.word	0x20000358

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b090      	sub	sp, #64	; 0x40
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 0318 	add.w	r3, r7, #24
 8000912:	2228      	movs	r2, #40	; 0x28
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f003 fe2c 	bl	8004574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800092a:	2301      	movs	r3, #1
 800092c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800092e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000932:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000938:	2301      	movs	r3, #1
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093c:	2302      	movs	r3, #2
 800093e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000940:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000944:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000946:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800094a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094c:	f107 0318 	add.w	r3, r7, #24
 8000950:	4618      	mov	r0, r3
 8000952:	f000 fd35 	bl	80013c0 <HAL_RCC_OscConfig>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800095c:	f000 fb18 	bl	8000f90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000960:	230f      	movs	r3, #15
 8000962:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000964:	2302      	movs	r3, #2
 8000966:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800096c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000970:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000976:	1d3b      	adds	r3, r7, #4
 8000978:	2102      	movs	r1, #2
 800097a:	4618      	mov	r0, r3
 800097c:	f000 ffa2 	bl	80018c4 <HAL_RCC_ClockConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000986:	f000 fb03 	bl	8000f90 <Error_Handler>
  }
}
 800098a:	bf00      	nop
 800098c:	3740      	adds	r7, #64	; 0x40
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099a:	4b0e      	ldr	r3, [pc, #56]	; (80009d4 <MX_GPIO_Init+0x40>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	4a0d      	ldr	r2, [pc, #52]	; (80009d4 <MX_GPIO_Init+0x40>)
 80009a0:	f043 0320 	orr.w	r3, r3, #32
 80009a4:	6193      	str	r3, [r2, #24]
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <MX_GPIO_Init+0x40>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	f003 0320 	and.w	r3, r3, #32
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b08      	ldr	r3, [pc, #32]	; (80009d4 <MX_GPIO_Init+0x40>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	4a07      	ldr	r2, [pc, #28]	; (80009d4 <MX_GPIO_Init+0x40>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6193      	str	r3, [r2, #24]
 80009be:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <MX_GPIO_Init+0x40>)
 80009c0:	699b      	ldr	r3, [r3, #24]
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

}
 80009ca:	bf00      	nop
 80009cc:	370c      	adds	r7, #12
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	40021000 	.word	0x40021000

080009d8 <USER_RCC_Init>:

/* USER CODE BEGIN 4 */
void USER_RCC_Init(void){
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
	RCC->APB2ENR	|=	 RCC_APB2ENR_USART1EN// 	USART 1 clock enable
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <USER_RCC_Init+0x28>)
 80009de:	699b      	ldr	r3, [r3, #24]
 80009e0:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <USER_RCC_Init+0x28>)
 80009e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	6193      	str	r3, [r2, #24]
					| 	 RCC_APB2ENR_IOPAEN;//		I/O port A clock enable

	RCC->APB2ENR    |=	 RCC_APB1ENR_TIM2EN;
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <USER_RCC_Init+0x28>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a03      	ldr	r2, [pc, #12]	; (8000a00 <USER_RCC_Init+0x28>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	6193      	str	r3, [r2, #24]
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	40021000 	.word	0x40021000

08000a04 <USER_GPIO_Init>:

void USER_GPIO_Init(void){
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
	//Input pull up
			GPIOA->BSRR = GPIO_BSRR_BS0;
 8000a08:	4b49      	ldr	r3, [pc, #292]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	611a      	str	r2, [r3, #16]
			GPIOA->CRL &= ~GPIO_CRL_CNF0_0 & ~GPIO_CRL_MODE0;
 8000a0e:	4b48      	ldr	r3, [pc, #288]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a47      	ldr	r2, [pc, #284]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a14:	f023 0307 	bic.w	r3, r3, #7
 8000a18:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= GPIO_CRL_CNF0_1;
 8000a1a:	4b45      	ldr	r3, [pc, #276]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a44      	ldr	r2, [pc, #272]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a20:	f043 0308 	orr.w	r3, r3, #8
 8000a24:	6013      	str	r3, [r2, #0]

			GPIOA->BSRR = GPIO_BSRR_BS1;
 8000a26:	4b42      	ldr	r3, [pc, #264]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a28:	2202      	movs	r2, #2
 8000a2a:	611a      	str	r2, [r3, #16]
			GPIOA->CRL &= ~GPIO_CRL_CNF1_0 & ~GPIO_CRL_MODE1;
 8000a2c:	4b40      	ldr	r3, [pc, #256]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a3f      	ldr	r2, [pc, #252]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a36:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= GPIO_CRL_CNF1_1;
 8000a38:	4b3d      	ldr	r3, [pc, #244]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a3c      	ldr	r2, [pc, #240]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a42:	6013      	str	r3, [r2, #0]

			GPIOA->BSRR = GPIO_BSRR_BS2;
 8000a44:	4b3a      	ldr	r3, [pc, #232]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a46:	2204      	movs	r2, #4
 8000a48:	611a      	str	r2, [r3, #16]
			GPIOA->CRL &= ~GPIO_CRL_CNF2_0 & ~GPIO_CRL_MODE2;
 8000a4a:	4b39      	ldr	r3, [pc, #228]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a38      	ldr	r2, [pc, #224]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a50:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000a54:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= GPIO_CRL_CNF2_1;
 8000a56:	4b36      	ldr	r3, [pc, #216]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a35      	ldr	r2, [pc, #212]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a60:	6013      	str	r3, [r2, #0]

			GPIOA->BSRR = GPIO_BSRR_BS3;
 8000a62:	4b33      	ldr	r3, [pc, #204]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a64:	2208      	movs	r2, #8
 8000a66:	611a      	str	r2, [r3, #16]
			GPIOA->CRL &= ~GPIO_CRL_CNF3_0 & ~GPIO_CRL_MODE3;
 8000a68:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a30      	ldr	r2, [pc, #192]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000a72:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= GPIO_CRL_CNF3_1;
 8000a74:	4b2e      	ldr	r3, [pc, #184]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a2d      	ldr	r2, [pc, #180]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a7e:	6013      	str	r3, [r2, #0]


			//Output push-pull.
			GPIOA->BSRR = GPIO_BSRR_BS4;
 8000a80:	4b2b      	ldr	r3, [pc, #172]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a82:	2210      	movs	r2, #16
 8000a84:	611a      	str	r2, [r3, #16]
			GPIOA->CRL &= ~GPIO_CRL_CNF4 & ~GPIO_CRL_MODE4_1;
 8000a86:	4b2a      	ldr	r3, [pc, #168]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a29      	ldr	r2, [pc, #164]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a8c:	f423 2360 	bic.w	r3, r3, #917504	; 0xe0000
 8000a90:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= GPIO_CRL_MODE4_0;
 8000a92:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a26      	ldr	r2, [pc, #152]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a9c:	6013      	str	r3, [r2, #0]

			GPIOA->BSRR = GPIO_BSRR_BS5;
 8000a9e:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000aa0:	2220      	movs	r2, #32
 8000aa2:	611a      	str	r2, [r3, #16]
			GPIOA->CRL &= ~GPIO_CRL_CNF5 & ~GPIO_CRL_MODE5_1;
 8000aa4:	4b22      	ldr	r3, [pc, #136]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a21      	ldr	r2, [pc, #132]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000aaa:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8000aae:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= GPIO_CRL_MODE5_0;
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a1e      	ldr	r2, [pc, #120]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000ab6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000aba:	6013      	str	r3, [r2, #0]


			GPIOA->BSRR = GPIO_BSRR_BS6;
 8000abc:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000abe:	2240      	movs	r2, #64	; 0x40
 8000ac0:	611a      	str	r2, [r3, #16]
			GPIOA->CRL &= ~GPIO_CRL_CNF6 & ~GPIO_CRL_MODE6_1;
 8000ac2:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4a1a      	ldr	r2, [pc, #104]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000ac8:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8000acc:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= GPIO_CRL_MODE6_0;
 8000ace:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	4a17      	ldr	r2, [pc, #92]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000ad4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ad8:	6013      	str	r3, [r2, #0]


			GPIOA->BSRR = GPIO_BSRR_BS7;
 8000ada:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000adc:	2280      	movs	r2, #128	; 0x80
 8000ade:	611a      	str	r2, [r3, #16]
			GPIOA->CRL &= ~GPIO_CRL_CNF7 & ~GPIO_CRL_MODE7_1;
 8000ae0:	4b13      	ldr	r3, [pc, #76]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000ae6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8000aea:	6013      	str	r3, [r2, #0]
			GPIOA->CRL |= GPIO_CRL_MODE7_0;
 8000aec:	4b10      	ldr	r3, [pc, #64]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a0f      	ldr	r2, [pc, #60]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af6:	6013      	str	r3, [r2, #0]

			//USART
			GPIOA->CRH	&=	~GPIO_CRH_CNF9_0 & ~GPIO_CRH_MODE9_1;
 8000af8:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	4a0c      	ldr	r2, [pc, #48]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000afe:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000b02:	6053      	str	r3, [r2, #4]
			GPIOA->CRH	|=	 GPIO_CRH_CNF9_1 |	GPIO_CRH_MODE9_0;
 8000b04:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	4a09      	ldr	r2, [pc, #36]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000b0a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000b0e:	6053      	str	r3, [r2, #4]

			GPIOA->CRH	&=	~GPIO_CRH_CNF10_1 & ~GPIO_CRH_MODE10;
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000b16:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8000b1a:	6053      	str	r3, [r2, #4]
			GPIOA->CRH	|=	 GPIO_CRH_CNF10_0;
 8000b1c:	4b04      	ldr	r3, [pc, #16]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	4a03      	ldr	r2, [pc, #12]	; (8000b30 <USER_GPIO_Init+0x12c>)
 8000b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b26:	6053      	str	r3, [r2, #4]

}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	40010800 	.word	0x40010800

08000b34 <USER_USART1_Init>:

void USER_USART1_Init(void){
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  //complete the configurations for 9600 baud rate, 1 start_8-bit data_1 stop bits
	USART1->BRR	=	0X1D4C;//			9600 BPS -> 468.75, 0% ERROR
 8000b38:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <USER_USART1_Init+0x40>)
 8000b3a:	f641 524c 	movw	r2, #7500	; 0x1d4c
 8000b3e:	609a      	str	r2, [r3, #8]
		USART1->CR1	&=	~USART_CR1_M//		1 start bit, 8 data bits
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <USER_USART1_Init+0x40>)
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <USER_USART1_Init+0x40>)
 8000b46:	f423 53e7 	bic.w	r3, r3, #7392	; 0x1ce0
 8000b4a:	f023 0313 	bic.w	r3, r3, #19
 8000b4e:	60d3      	str	r3, [r2, #12]
					&	~USART_CR1_TCIE//	interrupt disabled (transmission complete)
					&	~USART_CR1_RXNEIE//	interrupt disabled (data received)
					&	~USART_CR1_IDLEIE//	interrupt disabled (idle line detected)
					&	~USART_CR1_RWU//	receiver active mode
					&	~USART_CR1_SBK;//	no break character transmitted
		USART1->CR1	|=	USART_CR1_UE//		USART enabled
 8000b50:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <USER_USART1_Init+0x40>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	4a07      	ldr	r2, [pc, #28]	; (8000b74 <USER_USART1_Init+0x40>)
 8000b56:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b5a:	f043 030c 	orr.w	r3, r3, #12
 8000b5e:	60d3      	str	r3, [r2, #12]
					|	USART_CR1_TE//		transmitter enabled
					|	USART_CR1_RE;//		receiver enabled
		USART1->CR2	&=	~USART_CR2_STOP;//	1 stop bit
 8000b60:	4b04      	ldr	r3, [pc, #16]	; (8000b74 <USER_USART1_Init+0x40>)
 8000b62:	691b      	ldr	r3, [r3, #16]
 8000b64:	4a03      	ldr	r2, [pc, #12]	; (8000b74 <USER_USART1_Init+0x40>)
 8000b66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b6a:	6113      	str	r3, [r2, #16]
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr
 8000b74:	40013800 	.word	0x40013800

08000b78 <buttonTask>:

void buttonTask(void const * argument)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b088      	sub	sp, #32
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  int a;

  for(;;)
  {
	  	  //b = 1;
	  	  a = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
	  	  //Teclado matricial
	  	  GPIOA->ODR |= GPIO_ODR_ODR4;
 8000b84:	4b4f      	ldr	r3, [pc, #316]	; (8000cc4 <buttonTask+0x14c>)
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	4a4e      	ldr	r2, [pc, #312]	; (8000cc4 <buttonTask+0x14c>)
 8000b8a:	f043 0310 	orr.w	r3, r3, #16
 8000b8e:	60d3      	str	r3, [r2, #12]
	  	  GPIOA->ODR &= ~GPIO_ODR_ODR5;
 8000b90:	4b4c      	ldr	r3, [pc, #304]	; (8000cc4 <buttonTask+0x14c>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	4a4b      	ldr	r2, [pc, #300]	; (8000cc4 <buttonTask+0x14c>)
 8000b96:	f023 0320 	bic.w	r3, r3, #32
 8000b9a:	60d3      	str	r3, [r2, #12]
	  	  GPIOA->ODR |= GPIO_ODR_ODR6;
 8000b9c:	4b49      	ldr	r3, [pc, #292]	; (8000cc4 <buttonTask+0x14c>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	4a48      	ldr	r2, [pc, #288]	; (8000cc4 <buttonTask+0x14c>)
 8000ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ba6:	60d3      	str	r3, [r2, #12]
	  	  GPIOA->ODR |= GPIO_ODR_ODR7;
 8000ba8:	4b46      	ldr	r3, [pc, #280]	; (8000cc4 <buttonTask+0x14c>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	4a45      	ldr	r2, [pc, #276]	; (8000cc4 <buttonTask+0x14c>)
 8000bae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb2:	60d3      	str	r3, [r2, #12]

	  	  if (BUTTON2 == 0){
 8000bb4:	4b43      	ldr	r3, [pc, #268]	; (8000cc4 <buttonTask+0x14c>)
 8000bb6:	689b      	ldr	r3, [r3, #8]
 8000bb8:	f003 0304 	and.w	r3, r3, #4
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d104      	bne.n	8000bca <buttonTask+0x52>
	  	  	HAL_Delay(10);
 8000bc0:	200a      	movs	r0, #10
 8000bc2:	f000 faf9 	bl	80011b8 <HAL_Delay>
	  	  	a = 56;
 8000bc6:	2338      	movs	r3, #56	; 0x38
 8000bc8:	61fb      	str	r3, [r7, #28]
	  	  }

	  	  GPIOA->ODR |= ~GPIO_ODR_ODR4;
 8000bca:	4b3e      	ldr	r3, [pc, #248]	; (8000cc4 <buttonTask+0x14c>)
 8000bcc:	68db      	ldr	r3, [r3, #12]
 8000bce:	4a3d      	ldr	r2, [pc, #244]	; (8000cc4 <buttonTask+0x14c>)
 8000bd0:	f063 0310 	orn	r3, r3, #16
 8000bd4:	60d3      	str	r3, [r2, #12]
	  	  GPIOA->ODR |= GPIO_ODR_ODR5;
 8000bd6:	4b3b      	ldr	r3, [pc, #236]	; (8000cc4 <buttonTask+0x14c>)
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	4a3a      	ldr	r2, [pc, #232]	; (8000cc4 <buttonTask+0x14c>)
 8000bdc:	f043 0320 	orr.w	r3, r3, #32
 8000be0:	60d3      	str	r3, [r2, #12]
	  	  GPIOA->ODR &= ~GPIO_ODR_ODR6;
 8000be2:	4b38      	ldr	r3, [pc, #224]	; (8000cc4 <buttonTask+0x14c>)
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	4a37      	ldr	r2, [pc, #220]	; (8000cc4 <buttonTask+0x14c>)
 8000be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000bec:	60d3      	str	r3, [r2, #12]
	  	  GPIOA->ODR |= GPIO_ODR_ODR7;
 8000bee:	4b35      	ldr	r3, [pc, #212]	; (8000cc4 <buttonTask+0x14c>)
 8000bf0:	68db      	ldr	r3, [r3, #12]
 8000bf2:	4a34      	ldr	r2, [pc, #208]	; (8000cc4 <buttonTask+0x14c>)
 8000bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf8:	60d3      	str	r3, [r2, #12]

	  	  if (BUTTON1 == 0){
 8000bfa:	4b32      	ldr	r3, [pc, #200]	; (8000cc4 <buttonTask+0x14c>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d105      	bne.n	8000c12 <buttonTask+0x9a>
	  	  	HAL_Delay(10);
 8000c06:	200a      	movs	r0, #10
 8000c08:	f000 fad6 	bl	80011b8 <HAL_Delay>
	  	  	a = 54;
 8000c0c:	2336      	movs	r3, #54	; 0x36
 8000c0e:	61fb      	str	r3, [r7, #28]
 8000c10:	e016      	b.n	8000c40 <buttonTask+0xc8>
	  	  }
	  	  else if (BUTTON2 == 0){
 8000c12:	4b2c      	ldr	r3, [pc, #176]	; (8000cc4 <buttonTask+0x14c>)
 8000c14:	689b      	ldr	r3, [r3, #8]
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d105      	bne.n	8000c2a <buttonTask+0xb2>
	  	  	HAL_Delay(50);
 8000c1e:	2032      	movs	r0, #50	; 0x32
 8000c20:	f000 faca 	bl	80011b8 <HAL_Delay>
	  	  	a = 53;
 8000c24:	2335      	movs	r3, #53	; 0x35
 8000c26:	61fb      	str	r3, [r7, #28]
 8000c28:	e00a      	b.n	8000c40 <buttonTask+0xc8>
	  	  }
	  	  else if (BUTTON3 == 0){
 8000c2a:	4b26      	ldr	r3, [pc, #152]	; (8000cc4 <buttonTask+0x14c>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d104      	bne.n	8000c40 <buttonTask+0xc8>
	  	  	HAL_Delay(10);
 8000c36:	200a      	movs	r0, #10
 8000c38:	f000 fabe 	bl	80011b8 <HAL_Delay>
	  	  	a = 52;
 8000c3c:	2334      	movs	r3, #52	; 0x34
 8000c3e:	61fb      	str	r3, [r7, #28]
	  	  }

	  	  GPIOA->ODR |= GPIO_ODR_ODR4;
 8000c40:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <buttonTask+0x14c>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	4a1f      	ldr	r2, [pc, #124]	; (8000cc4 <buttonTask+0x14c>)
 8000c46:	f043 0310 	orr.w	r3, r3, #16
 8000c4a:	60d3      	str	r3, [r2, #12]
	  	  GPIOA->ODR |= GPIO_ODR_ODR5;
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <buttonTask+0x14c>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <buttonTask+0x14c>)
 8000c52:	f043 0320 	orr.w	r3, r3, #32
 8000c56:	60d3      	str	r3, [r2, #12]
	  	  GPIOA->ODR |= GPIO_ODR_ODR6;
 8000c58:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <buttonTask+0x14c>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	4a19      	ldr	r2, [pc, #100]	; (8000cc4 <buttonTask+0x14c>)
 8000c5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c62:	60d3      	str	r3, [r2, #12]
	  	  GPIOA->ODR &= ~GPIO_ODR_ODR7;
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <buttonTask+0x14c>)
 8000c66:	68db      	ldr	r3, [r3, #12]
 8000c68:	4a16      	ldr	r2, [pc, #88]	; (8000cc4 <buttonTask+0x14c>)
 8000c6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000c6e:	60d3      	str	r3, [r2, #12]

	  	  if (BUTTON2 == 0){
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <buttonTask+0x14c>)
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	f003 0304 	and.w	r3, r3, #4
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d104      	bne.n	8000c86 <buttonTask+0x10e>
	  	  	HAL_Delay(10);
 8000c7c:	200a      	movs	r0, #10
 8000c7e:	f000 fa9b 	bl	80011b8 <HAL_Delay>
	  	  	a = 50;
 8000c82:	2332      	movs	r3, #50	; 0x32
 8000c84:	61fb      	str	r3, [r7, #28]
	  	  }

	  	  if(a!=0 || b==0){
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d104      	bne.n	8000c96 <buttonTask+0x11e>
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <buttonTask+0x150>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f47f af75 	bne.w	8000b80 <buttonTask+0x8>
	  		s_event1 = osMessagePut(MsgQueueHandle, a, 1000);
 8000c96:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <buttonTask+0x154>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	69f9      	ldr	r1, [r7, #28]
 8000c9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f001 fac5 	bl	8002230 <osMessagePut>
 8000ca6:	61b8      	str	r0, [r7, #24]
	  		osDelay(100);
 8000ca8:	2064      	movs	r0, #100	; 0x64
 8000caa:	f001 fa84 	bl	80021b6 <osDelay>
	  		r_event1 = osMessageGet(MsgQueueHandle, 1000);
 8000cae:	4b07      	ldr	r3, [pc, #28]	; (8000ccc <buttonTask+0x154>)
 8000cb0:	6819      	ldr	r1, [r3, #0]
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 faf8 	bl	80022b0 <osMessageGet>
	  	  a = 0;
 8000cc0:	e75e      	b.n	8000b80 <buttonTask+0x8>
 8000cc2:	bf00      	nop
 8000cc4:	40010800 	.word	0x40010800
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000350 	.word	0x20000350

08000cd0 <senderTask>:
	  	  }
  }
}

void senderTask(void const * argument)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	  /* USER CODE BEGIN 5 */
	osStatus s_event;
	osEvent r_event;
	  /* Infinite loop */
	for(;;){
		  r_event = osMessageGet(MsgQueueHandle, 1000);
 8000cd8:	4b27      	ldr	r3, [pc, #156]	; (8000d78 <senderTask+0xa8>)
 8000cda:	6819      	ldr	r1, [r3, #0]
 8000cdc:	f107 0308 	add.w	r3, r7, #8
 8000ce0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f001 fae3 	bl	80022b0 <osMessageGet>
		  if( r_event.status == osEventMessage ){
 8000cea:	68bb      	ldr	r3, [r7, #8]
 8000cec:	2b10      	cmp	r3, #16
 8000cee:	d1f3      	bne.n	8000cd8 <senderTask+0x8>
			  if(b==1){
 8000cf0:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <senderTask+0xac>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d132      	bne.n	8000d5e <senderTask+0x8e>
				  if (r_event.value.v == 50){
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2b32      	cmp	r3, #50	; 0x32
 8000cfc:	d107      	bne.n	8000d0e <senderTask+0x3e>
					  USER_USART1_Transmit("2",sizeof("2"));
 8000cfe:	2102      	movs	r1, #2
 8000d00:	481f      	ldr	r0, [pc, #124]	; (8000d80 <senderTask+0xb0>)
 8000d02:	f000 f8f9 	bl	8000ef8 <USER_USART1_Transmit>
					  b = 0;
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <senderTask+0xac>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	e027      	b.n	8000d5e <senderTask+0x8e>
				  }
				  else if (r_event.value.v == 56){
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	2b38      	cmp	r3, #56	; 0x38
 8000d12:	d107      	bne.n	8000d24 <senderTask+0x54>
					  USER_USART1_Transmit("8",sizeof("8"));
 8000d14:	2102      	movs	r1, #2
 8000d16:	481b      	ldr	r0, [pc, #108]	; (8000d84 <senderTask+0xb4>)
 8000d18:	f000 f8ee 	bl	8000ef8 <USER_USART1_Transmit>
					  b = 0;
 8000d1c:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <senderTask+0xac>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	e01c      	b.n	8000d5e <senderTask+0x8e>
				  }
				  else if (r_event.value.v == 53){
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2b35      	cmp	r3, #53	; 0x35
 8000d28:	d104      	bne.n	8000d34 <senderTask+0x64>
					  USER_USART1_Transmit("5",sizeof("5"));
 8000d2a:	2102      	movs	r1, #2
 8000d2c:	4816      	ldr	r0, [pc, #88]	; (8000d88 <senderTask+0xb8>)
 8000d2e:	f000 f8e3 	bl	8000ef8 <USER_USART1_Transmit>
 8000d32:	e014      	b.n	8000d5e <senderTask+0x8e>
				  }
				  else if (r_event.value.v == 54){
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2b36      	cmp	r3, #54	; 0x36
 8000d38:	d107      	bne.n	8000d4a <senderTask+0x7a>
					  USER_USART1_Transmit("6",sizeof("6"));
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	4813      	ldr	r0, [pc, #76]	; (8000d8c <senderTask+0xbc>)
 8000d3e:	f000 f8db 	bl	8000ef8 <USER_USART1_Transmit>
					  b = 0;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <senderTask+0xac>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	e009      	b.n	8000d5e <senderTask+0x8e>
				  }
				  else if (r_event.value.v == 52){
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2b34      	cmp	r3, #52	; 0x34
 8000d4e:	d106      	bne.n	8000d5e <senderTask+0x8e>
					  USER_USART1_Transmit("4",sizeof("4"));
 8000d50:	2102      	movs	r1, #2
 8000d52:	480f      	ldr	r0, [pc, #60]	; (8000d90 <senderTask+0xc0>)
 8000d54:	f000 f8d0 	bl	8000ef8 <USER_USART1_Transmit>
					  b = 0;
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <senderTask+0xac>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
							  }
			  }


			  //USER_USART1_Transmit(r_event.value.v, sizeof(r_event.value.v));
			  osDelay(100);
 8000d5e:	2064      	movs	r0, #100	; 0x64
 8000d60:	f001 fa29 	bl	80021b6 <osDelay>
			  s_event = osMessagePut(MsgQueueHandle, 0, 1);
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <senderTask+0xa8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 fa5f 	bl	8002230 <osMessagePut>
 8000d72:	6178      	str	r0, [r7, #20]
		  r_event = osMessageGet(MsgQueueHandle, 1000);
 8000d74:	e7b0      	b.n	8000cd8 <senderTask+0x8>
 8000d76:	bf00      	nop
 8000d78:	20000350 	.word	0x20000350
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	080047c8 	.word	0x080047c8
 8000d84:	080047cc 	.word	0x080047cc
 8000d88:	080047d0 	.word	0x080047d0
 8000d8c:	080047d4 	.word	0x080047d4
 8000d90:	080047d8 	.word	0x080047d8

08000d94 <receiverTask>:
	  /* USER CODE END 5 */
}


void receiverTask(void const * argument)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b088      	sub	sp, #32
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	  /* Infinite loop */
	  uint8_t d;

	  for(;;)
	  {
		  	  HAL_Delay(90);
 8000d9c:	205a      	movs	r0, #90	; 0x5a
 8000d9e:	f000 fa0b 	bl	80011b8 <HAL_Delay>
		  	  d = USER_USART1_Receive();
 8000da2:	f000 f8cf 	bl	8000f44 <USER_USART1_Receive>
 8000da6:	4603      	mov	r3, r0
 8000da8:	77fb      	strb	r3, [r7, #31]
		  	  if(d!='{' && b==0){
 8000daa:	7ffb      	ldrb	r3, [r7, #31]
 8000dac:	2b7b      	cmp	r3, #123	; 0x7b
 8000dae:	d0f5      	beq.n	8000d9c <receiverTask+0x8>
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <receiverTask+0x50>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1f1      	bne.n	8000d9c <receiverTask+0x8>
		  		s_event3 = osMessagePut(MsgQueueHandle1, d, 1000);
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <receiverTask+0x54>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	7ff9      	ldrb	r1, [r7, #31]
 8000dbe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f001 fa34 	bl	8002230 <osMessagePut>
 8000dc8:	61b8      	str	r0, [r7, #24]
		  		osDelay(100);
 8000dca:	2064      	movs	r0, #100	; 0x64
 8000dcc:	f001 f9f3 	bl	80021b6 <osDelay>
		  		r_event3 = osMessageGet(MsgQueueHandle1, 2000);
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <receiverTask+0x54>)
 8000dd2:	6819      	ldr	r1, [r3, #0]
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 fa67 	bl	80022b0 <osMessageGet>
		  	  HAL_Delay(90);
 8000de2:	e7db      	b.n	8000d9c <receiverTask+0x8>
 8000de4:	20000000 	.word	0x20000000
 8000de8:	2000035c 	.word	0x2000035c

08000dec <LCDTask>:
		  	  }
	  }
}

void LCDTask(void const * argument)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
osStatus s_event4;
osEvent r_event4;
uint8_t data;
int x = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
int y = 1;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	623b      	str	r3, [r7, #32]
char a;
  /* Infinite loop */
for(;;){
	  r_event4 = osMessageGet(MsgQueueHandle1, 1);
 8000dfc:	4b3a      	ldr	r3, [pc, #232]	; (8000ee8 <LCDTask+0xfc>)
 8000dfe:	6819      	ldr	r1, [r3, #0]
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	2201      	movs	r2, #1
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 fa52 	bl	80022b0 <osMessageGet>
	  if( r_event4.status == osEventMessage ){
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2b10      	cmp	r3, #16
 8000e10:	d1f4      	bne.n	8000dfc <LCDTask+0x10>
		  data = r_event4.value.v;
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	77fb      	strb	r3, [r7, #31]
		  a = (char) data;
 8000e16:	7ffb      	ldrb	r3, [r7, #31]
 8000e18:	77bb      	strb	r3, [r7, #30]
		  HAL_Delay(110);
 8000e1a:	206e      	movs	r0, #110	; 0x6e
 8000e1c:	f000 f9cc 	bl	80011b8 <HAL_Delay>
		  if (data == 46){
 8000e20:	7ffb      	ldrb	r3, [r7, #31]
 8000e22:	2b2e      	cmp	r3, #46	; 0x2e
 8000e24:	d102      	bne.n	8000e2c <LCDTask+0x40>
			  b = 1;
 8000e26:	4b31      	ldr	r3, [pc, #196]	; (8000eec <LCDTask+0x100>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	601a      	str	r2, [r3, #0]
		  }
		  if (data != 46){
 8000e2c:	7ffb      	ldrb	r3, [r7, #31]
 8000e2e:	2b2e      	cmp	r3, #46	; 0x2e
 8000e30:	d051      	beq.n	8000ed6 <LCDTask+0xea>
			  if (data == 125){
 8000e32:	7ffb      	ldrb	r3, [r7, #31]
 8000e34:	2b7d      	cmp	r3, #125	; 0x7d
 8000e36:	d109      	bne.n	8000e4c <LCDTask+0x60>
				  LCD_Clear( );//			borra la pantalla
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f7ff fc07 	bl	800064c <LCD_Write_Cmd>
				  LCD_Set_Cursor( 1, 0 );
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2001      	movs	r0, #1
 8000e42:	f7ff fc29 	bl	8000698 <LCD_Set_Cursor>
				  x = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	627b      	str	r3, [r7, #36]	; 0x24
 8000e4a:	e044      	b.n	8000ed6 <LCDTask+0xea>
			  }
			  else if (data == 124){
 8000e4c:	7ffb      	ldrb	r3, [r7, #31]
 8000e4e:	2b7c      	cmp	r3, #124	; 0x7c
 8000e50:	d108      	bne.n	8000e64 <LCDTask+0x78>
				  if (sizeof(data))
				  LCD_Put_Char("a" );
 8000e52:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <LCDTask+0x104>)
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f7ff fc0c 	bl	8000674 <LCD_Put_Char>
				  x++;
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5e:	3301      	adds	r3, #1
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
 8000e62:	e038      	b.n	8000ed6 <LCDTask+0xea>
					  }
			  else if (data == 13){
 8000e64:	7ffb      	ldrb	r3, [r7, #31]
 8000e66:	2b0d      	cmp	r3, #13
 8000e68:	d117      	bne.n	8000e9a <LCDTask+0xae>
				  y = 2;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	623b      	str	r3, [r7, #32]
				  x = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
				  LCD_Set_Cursor( y, x);
 8000e72:	6a3b      	ldr	r3, [r7, #32]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e78:	b2d2      	uxtb	r2, r2
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fc0b 	bl	8000698 <LCD_Set_Cursor>
				  LCD_Put_Str("                ");
 8000e82:	481c      	ldr	r0, [pc, #112]	; (8000ef4 <LCDTask+0x108>)
 8000e84:	f7ff fc33 	bl	80006ee <LCD_Put_Str>
				  LCD_Set_Cursor( y, x);
 8000e88:	6a3b      	ldr	r3, [r7, #32]
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	4611      	mov	r1, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff fc00 	bl	8000698 <LCD_Set_Cursor>
 8000e98:	e01d      	b.n	8000ed6 <LCDTask+0xea>
			  }
			  else if (data == 95){
 8000e9a:	7ffb      	ldrb	r3, [r7, #31]
 8000e9c:	2b5f      	cmp	r3, #95	; 0x5f
 8000e9e:	d108      	bne.n	8000eb2 <LCDTask+0xc6>
				  y = 2;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	623b      	str	r3, [r7, #32]
				  LCD_Set_Cursor( y, 0);
 8000ea4:	6a3b      	ldr	r3, [r7, #32]
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fbf4 	bl	8000698 <LCD_Set_Cursor>
 8000eb0:	e011      	b.n	8000ed6 <LCDTask+0xea>
			  }
			  else {
				  if (x < 16){
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	dc07      	bgt.n	8000ec8 <LCDTask+0xdc>

					  if (sizeof(a))
					  LCD_Put_Char(a );
 8000eb8:	7fbb      	ldrb	r3, [r7, #30]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fbda 	bl	8000674 <LCD_Put_Char>
					  x++;
 8000ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ec6:	e006      	b.n	8000ed6 <LCDTask+0xea>
				  }
				  else{

					  if (sizeof(data))
					  LCD_Put_Char( data );
 8000ec8:	7ffb      	ldrb	r3, [r7, #31]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fbd2 	bl	8000674 <LCD_Put_Char>

					  x++;
 8000ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
				  }
			  }
		  }
	  s_event4 = osMessagePut(MsgQueueHandle1, 1, 1);
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <LCDTask+0xfc>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2201      	movs	r2, #1
 8000edc:	2101      	movs	r1, #1
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f001 f9a6 	bl	8002230 <osMessagePut>
 8000ee4:	61b8      	str	r0, [r7, #24]
	  r_event4 = osMessageGet(MsgQueueHandle1, 1);
 8000ee6:	e789      	b.n	8000dfc <LCDTask+0x10>
 8000ee8:	2000035c 	.word	0x2000035c
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	080047dc 	.word	0x080047dc
 8000ef4:	080047e0 	.word	0x080047e0

08000ef8 <USER_USART1_Transmit>:
}

}
/* USER CODE END 4 */

void USER_USART1_Transmit(uint8_t *pData, uint16_t size){
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	807b      	strh	r3, [r7, #2]
	for(int i=0; i < size; i++){
 8000f04:	2300      	movs	r3, #0
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	e00f      	b.n	8000f2a <USER_USART1_Transmit+0x32>
		while((USART1->SR & USART_SR_TXE)==0){
 8000f0a:	bf00      	nop
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <USER_USART1_Transmit+0x48>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d00d      	beq.n	8000f34 <USER_USART1_Transmit+0x3c>
			return;
		}
		USART1->DR = *pData++;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	607a      	str	r2, [r7, #4]
 8000f1e:	781a      	ldrb	r2, [r3, #0]
 8000f20:	4b07      	ldr	r3, [pc, #28]	; (8000f40 <USER_USART1_Transmit+0x48>)
 8000f22:	605a      	str	r2, [r3, #4]
	for(int i=0; i < size; i++){
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	3301      	adds	r3, #1
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	887b      	ldrh	r3, [r7, #2]
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	dbeb      	blt.n	8000f0a <USER_USART1_Transmit+0x12>
 8000f32:	e000      	b.n	8000f36 <USER_USART1_Transmit+0x3e>
			return;
 8000f34:	bf00      	nop
	}
}
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	40013800 	.word	0x40013800

08000f44 <USER_USART1_Receive>:

uint8_t USER_USART1_Receive(void){
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
	while ((USART1->SR & USART_SR_RXNE)==0){
 8000f48:	bf00      	nop
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <USER_USART1_Receive+0x24>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0320 	and.w	r3, r3, #32
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <USER_USART1_Receive+0x16>
		return '{';
 8000f56:	237b      	movs	r3, #123	; 0x7b
 8000f58:	e002      	b.n	8000f60 <USER_USART1_Receive+0x1c>
	}
	return USART1->DR;
 8000f5a:	4b03      	ldr	r3, [pc, #12]	; (8000f68 <USER_USART1_Receive+0x24>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	b2db      	uxtb	r3, r3
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	40013800 	.word	0x40013800

08000f6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a04      	ldr	r2, [pc, #16]	; (8000f8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d101      	bne.n	8000f82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f7e:	f000 f8ff 	bl	8001180 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40000800 	.word	0x40000800

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
}
 8000f96:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	  /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1)
 8000f98:	e7fe      	b.n	8000f98 <Error_Handler+0x8>
	...

08000f9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HAL_MspInit+0x68>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	4a17      	ldr	r2, [pc, #92]	; (8001004 <HAL_MspInit+0x68>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6193      	str	r3, [r2, #24]
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_MspInit+0x68>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	4b12      	ldr	r3, [pc, #72]	; (8001004 <HAL_MspInit+0x68>)
 8000fbc:	69db      	ldr	r3, [r3, #28]
 8000fbe:	4a11      	ldr	r2, [pc, #68]	; (8001004 <HAL_MspInit+0x68>)
 8000fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	61d3      	str	r3, [r2, #28]
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <HAL_MspInit+0x68>)
 8000fc8:	69db      	ldr	r3, [r3, #28]
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	210f      	movs	r1, #15
 8000fd6:	f06f 0001 	mvn.w	r0, #1
 8000fda:	f000 f9c6 	bl	800136a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000fde:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <HAL_MspInit+0x6c>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <HAL_MspInit+0x6c>)
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000
 8001008:	40010000 	.word	0x40010000

0800100c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	; 0x30
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001014:	2300      	movs	r3, #0
 8001016:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800101c:	2200      	movs	r2, #0
 800101e:	6879      	ldr	r1, [r7, #4]
 8001020:	201e      	movs	r0, #30
 8001022:	f000 f9a2 	bl	800136a <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001026:	201e      	movs	r0, #30
 8001028:	f000 f9bb 	bl	80013a2 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800102c:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <HAL_InitTick+0xa0>)
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	4a1e      	ldr	r2, [pc, #120]	; (80010ac <HAL_InitTick+0xa0>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	61d3      	str	r3, [r2, #28]
 8001038:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <HAL_InitTick+0xa0>)
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	f003 0304 	and.w	r3, r3, #4
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001044:	f107 0210 	add.w	r2, r7, #16
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4611      	mov	r1, r2
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fd9e 	bl	8001b90 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001054:	f000 fd88 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 8001058:	4603      	mov	r3, r0
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800105e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001060:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <HAL_InitTick+0xa4>)
 8001062:	fba2 2303 	umull	r2, r3, r2, r3
 8001066:	0c9b      	lsrs	r3, r3, #18
 8001068:	3b01      	subs	r3, #1
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <HAL_InitTick+0xa8>)
 800106e:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <HAL_InitTick+0xac>)
 8001070:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <HAL_InitTick+0xa8>)
 8001074:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001078:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800107a:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <HAL_InitTick+0xa8>)
 800107c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001080:	4b0c      	ldr	r3, [pc, #48]	; (80010b4 <HAL_InitTick+0xa8>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001086:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <HAL_InitTick+0xa8>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 800108c:	4809      	ldr	r0, [pc, #36]	; (80010b4 <HAL_InitTick+0xa8>)
 800108e:	f000 fdcd 	bl	8001c2c <HAL_TIM_Base_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d104      	bne.n	80010a2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8001098:	4806      	ldr	r0, [pc, #24]	; (80010b4 <HAL_InitTick+0xa8>)
 800109a:	f000 fe1f 	bl	8001cdc <HAL_TIM_Base_Start_IT>
 800109e:	4603      	mov	r3, r0
 80010a0:	e000      	b.n	80010a4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3730      	adds	r7, #48	; 0x30
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40021000 	.word	0x40021000
 80010b0:	431bde83 	.word	0x431bde83
 80010b4:	20000360 	.word	0x20000360
 80010b8:	40000800 	.word	0x40000800

080010bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <NMI_Handler+0x4>

080010c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c6:	e7fe      	b.n	80010c6 <HardFault_Handler+0x4>

080010c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <MemManage_Handler+0x4>

080010ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d2:	e7fe      	b.n	80010d2 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <UsageFault_Handler+0x4>

080010da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr
	...

080010e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010ec:	4802      	ldr	r0, [pc, #8]	; (80010f8 <TIM4_IRQHandler+0x10>)
 80010ee:	f000 fe47 	bl	8001d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000360 	.word	0x20000360

080010fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <Reset_Handler>:
 8001108:	480c      	ldr	r0, [pc, #48]	; (800113c <LoopFillZerobss+0x12>)
 800110a:	490d      	ldr	r1, [pc, #52]	; (8001140 <LoopFillZerobss+0x16>)
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <LoopFillZerobss+0x1a>)
 800110e:	2300      	movs	r3, #0
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:
 8001112:	58d4      	ldr	r4, [r2, r3]
 8001114:	50c4      	str	r4, [r0, r3]
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:
 8001118:	18c4      	adds	r4, r0, r3
 800111a:	428c      	cmp	r4, r1
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <LoopFillZerobss+0x1e>)
 8001120:	4c0a      	ldr	r4, [pc, #40]	; (800114c <LoopFillZerobss+0x22>)
 8001122:	2300      	movs	r3, #0
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:
 800112a:	42a2      	cmp	r2, r4
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>
 800112e:	f7ff ffe5 	bl	80010fc <SystemInit>
 8001132:	f003 f9eb 	bl	800450c <__libc_init_array>
 8001136:	f7ff fb4b 	bl	80007d0 <main>
 800113a:	4770      	bx	lr
 800113c:	20000000 	.word	0x20000000
 8001140:	20000078 	.word	0x20000078
 8001144:	080048cc 	.word	0x080048cc
 8001148:	20000078 	.word	0x20000078
 800114c:	20001100 	.word	0x20001100

08001150 <ADC1_2_IRQHandler>:
 8001150:	e7fe      	b.n	8001150 <ADC1_2_IRQHandler>
	...

08001154 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <HAL_Init+0x28>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a07      	ldr	r2, [pc, #28]	; (800117c <HAL_Init+0x28>)
 800115e:	f043 0310 	orr.w	r3, r3, #16
 8001162:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001164:	2003      	movs	r0, #3
 8001166:	f000 f8f5 	bl	8001354 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800116a:	200f      	movs	r0, #15
 800116c:	f7ff ff4e 	bl	800100c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001170:	f7ff ff14 	bl	8000f9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40022000 	.word	0x40022000

08001180 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_IncTick+0x1c>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	4b05      	ldr	r3, [pc, #20]	; (80011a0 <HAL_IncTick+0x20>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4413      	add	r3, r2
 8001190:	4a03      	ldr	r2, [pc, #12]	; (80011a0 <HAL_IncTick+0x20>)
 8001192:	6013      	str	r3, [r2, #0]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	bc80      	pop	{r7}
 800119a:	4770      	bx	lr
 800119c:	2000000c 	.word	0x2000000c
 80011a0:	200003a8 	.word	0x200003a8

080011a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;
 80011a8:	4b02      	ldr	r3, [pc, #8]	; (80011b4 <HAL_GetTick+0x10>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	200003a8 	.word	0x200003a8

080011b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c0:	f7ff fff0 	bl	80011a4 <HAL_GetTick>
 80011c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d0:	d005      	beq.n	80011de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_Delay+0x44>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	461a      	mov	r2, r3
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	4413      	add	r3, r2
 80011dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011de:	bf00      	nop
 80011e0:	f7ff ffe0 	bl	80011a4 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d8f7      	bhi.n	80011e0 <HAL_Delay+0x28>
  {
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2000000c 	.word	0x2000000c

08001200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800121c:	4013      	ands	r3, r2
 800121e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800122c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001232:	4a04      	ldr	r2, [pc, #16]	; (8001244 <__NVIC_SetPriorityGrouping+0x44>)
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	60d3      	str	r3, [r2, #12]
}
 8001238:	bf00      	nop
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bc80      	pop	{r7}
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <__NVIC_GetPriorityGrouping+0x18>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	0a1b      	lsrs	r3, r3, #8
 8001252:	f003 0307 	and.w	r3, r3, #7
}
 8001256:	4618      	mov	r0, r3
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	e000ed00 	.word	0xe000ed00

08001264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	2b00      	cmp	r3, #0
 8001274:	db0b      	blt.n	800128e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	f003 021f 	and.w	r2, r3, #31
 800127c:	4906      	ldr	r1, [pc, #24]	; (8001298 <__NVIC_EnableIRQ+0x34>)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	095b      	lsrs	r3, r3, #5
 8001284:	2001      	movs	r0, #1
 8001286:	fa00 f202 	lsl.w	r2, r0, r2
 800128a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr
 8001298:	e000e100 	.word	0xe000e100

0800129c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	db0a      	blt.n	80012c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	490c      	ldr	r1, [pc, #48]	; (80012e8 <__NVIC_SetPriority+0x4c>)
 80012b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ba:	0112      	lsls	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	440b      	add	r3, r1
 80012c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012c4:	e00a      	b.n	80012dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	4908      	ldr	r1, [pc, #32]	; (80012ec <__NVIC_SetPriority+0x50>)
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	f003 030f 	and.w	r3, r3, #15
 80012d2:	3b04      	subs	r3, #4
 80012d4:	0112      	lsls	r2, r2, #4
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	440b      	add	r3, r1
 80012da:	761a      	strb	r2, [r3, #24]
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bc80      	pop	{r7}
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b089      	sub	sp, #36	; 0x24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	f003 0307 	and.w	r3, r3, #7
 8001302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f1c3 0307 	rsb	r3, r3, #7
 800130a:	2b04      	cmp	r3, #4
 800130c:	bf28      	it	cs
 800130e:	2304      	movcs	r3, #4
 8001310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3304      	adds	r3, #4
 8001316:	2b06      	cmp	r3, #6
 8001318:	d902      	bls.n	8001320 <NVIC_EncodePriority+0x30>
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	3b03      	subs	r3, #3
 800131e:	e000      	b.n	8001322 <NVIC_EncodePriority+0x32>
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001324:	f04f 32ff 	mov.w	r2, #4294967295
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43da      	mvns	r2, r3
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	401a      	ands	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001338:	f04f 31ff 	mov.w	r1, #4294967295
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa01 f303 	lsl.w	r3, r1, r3
 8001342:	43d9      	mvns	r1, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001348:	4313      	orrs	r3, r2
         );
}
 800134a:	4618      	mov	r0, r3
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7ff ff4f 	bl	8001200 <__NVIC_SetPriorityGrouping>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}

0800136a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800136a:	b580      	push	{r7, lr}
 800136c:	b086      	sub	sp, #24
 800136e:	af00      	add	r7, sp, #0
 8001370:	4603      	mov	r3, r0
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
 8001376:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001378:	2300      	movs	r3, #0
 800137a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800137c:	f7ff ff64 	bl	8001248 <__NVIC_GetPriorityGrouping>
 8001380:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	6978      	ldr	r0, [r7, #20]
 8001388:	f7ff ffb2 	bl	80012f0 <NVIC_EncodePriority>
 800138c:	4602      	mov	r2, r0
 800138e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff ff81 	bl	800129c <__NVIC_SetPriority>
}
 800139a:	bf00      	nop
 800139c:	3718      	adds	r7, #24
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	b082      	sub	sp, #8
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	4603      	mov	r3, r0
 80013aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff57 	bl	8001264 <__NVIC_EnableIRQ>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e272      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f000 8087 	beq.w	80014ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013e0:	4b92      	ldr	r3, [pc, #584]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 030c 	and.w	r3, r3, #12
 80013e8:	2b04      	cmp	r3, #4
 80013ea:	d00c      	beq.n	8001406 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013ec:	4b8f      	ldr	r3, [pc, #572]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 030c 	and.w	r3, r3, #12
 80013f4:	2b08      	cmp	r3, #8
 80013f6:	d112      	bne.n	800141e <HAL_RCC_OscConfig+0x5e>
 80013f8:	4b8c      	ldr	r3, [pc, #560]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001404:	d10b      	bne.n	800141e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001406:	4b89      	ldr	r3, [pc, #548]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d06c      	beq.n	80014ec <HAL_RCC_OscConfig+0x12c>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d168      	bne.n	80014ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e24c      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001426:	d106      	bne.n	8001436 <HAL_RCC_OscConfig+0x76>
 8001428:	4b80      	ldr	r3, [pc, #512]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a7f      	ldr	r2, [pc, #508]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 800142e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	e02e      	b.n	8001494 <HAL_RCC_OscConfig+0xd4>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0x98>
 800143e:	4b7b      	ldr	r3, [pc, #492]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a7a      	ldr	r2, [pc, #488]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001444:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001448:	6013      	str	r3, [r2, #0]
 800144a:	4b78      	ldr	r3, [pc, #480]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a77      	ldr	r2, [pc, #476]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001450:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	e01d      	b.n	8001494 <HAL_RCC_OscConfig+0xd4>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001460:	d10c      	bne.n	800147c <HAL_RCC_OscConfig+0xbc>
 8001462:	4b72      	ldr	r3, [pc, #456]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a71      	ldr	r2, [pc, #452]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	4b6f      	ldr	r3, [pc, #444]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a6e      	ldr	r2, [pc, #440]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e00b      	b.n	8001494 <HAL_RCC_OscConfig+0xd4>
 800147c:	4b6b      	ldr	r3, [pc, #428]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a6a      	ldr	r2, [pc, #424]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b68      	ldr	r3, [pc, #416]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a67      	ldr	r2, [pc, #412]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 800148e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001492:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d013      	beq.n	80014c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff fe82 	bl	80011a4 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014a4:	f7ff fe7e 	bl	80011a4 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b64      	cmp	r3, #100	; 0x64
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e200      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b6:	4b5d      	ldr	r3, [pc, #372]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0xe4>
 80014c2:	e014      	b.n	80014ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c4:	f7ff fe6e 	bl	80011a4 <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014cc:	f7ff fe6a 	bl	80011a4 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b64      	cmp	r3, #100	; 0x64
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e1ec      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014de:	4b53      	ldr	r3, [pc, #332]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1f0      	bne.n	80014cc <HAL_RCC_OscConfig+0x10c>
 80014ea:	e000      	b.n	80014ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d063      	beq.n	80015c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014fa:	4b4c      	ldr	r3, [pc, #304]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	2b00      	cmp	r3, #0
 8001504:	d00b      	beq.n	800151e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001506:	4b49      	ldr	r3, [pc, #292]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f003 030c 	and.w	r3, r3, #12
 800150e:	2b08      	cmp	r3, #8
 8001510:	d11c      	bne.n	800154c <HAL_RCC_OscConfig+0x18c>
 8001512:	4b46      	ldr	r3, [pc, #280]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d116      	bne.n	800154c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800151e:	4b43      	ldr	r3, [pc, #268]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d005      	beq.n	8001536 <HAL_RCC_OscConfig+0x176>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d001      	beq.n	8001536 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e1c0      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001536:	4b3d      	ldr	r3, [pc, #244]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	00db      	lsls	r3, r3, #3
 8001544:	4939      	ldr	r1, [pc, #228]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001546:	4313      	orrs	r3, r2
 8001548:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800154a:	e03a      	b.n	80015c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d020      	beq.n	8001596 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001554:	4b36      	ldr	r3, [pc, #216]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001556:	2201      	movs	r2, #1
 8001558:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155a:	f7ff fe23 	bl	80011a4 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001560:	e008      	b.n	8001574 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001562:	f7ff fe1f 	bl	80011a4 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	2b02      	cmp	r3, #2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e1a1      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001574:	4b2d      	ldr	r3, [pc, #180]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d0f0      	beq.n	8001562 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001580:	4b2a      	ldr	r3, [pc, #168]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	00db      	lsls	r3, r3, #3
 800158e:	4927      	ldr	r1, [pc, #156]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 8001590:	4313      	orrs	r3, r2
 8001592:	600b      	str	r3, [r1, #0]
 8001594:	e015      	b.n	80015c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001596:	4b26      	ldr	r3, [pc, #152]	; (8001630 <HAL_RCC_OscConfig+0x270>)
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159c:	f7ff fe02 	bl	80011a4 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a4:	f7ff fdfe 	bl	80011a4 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e180      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1f0      	bne.n	80015a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d03a      	beq.n	8001644 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d019      	beq.n	800160a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <HAL_RCC_OscConfig+0x274>)
 80015d8:	2201      	movs	r2, #1
 80015da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015dc:	f7ff fde2 	bl	80011a4 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015e4:	f7ff fdde 	bl	80011a4 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e160      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <HAL_RCC_OscConfig+0x26c>)
 80015f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001602:	2001      	movs	r0, #1
 8001604:	f000 faf4 	bl	8001bf0 <RCC_Delay>
 8001608:	e01c      	b.n	8001644 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800160a:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <HAL_RCC_OscConfig+0x274>)
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001610:	f7ff fdc8 	bl	80011a4 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001616:	e00f      	b.n	8001638 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001618:	f7ff fdc4 	bl	80011a4 <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b02      	cmp	r3, #2
 8001624:	d908      	bls.n	8001638 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e146      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000
 8001630:	42420000 	.word	0x42420000
 8001634:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001638:	4b92      	ldr	r3, [pc, #584]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1e9      	bne.n	8001618 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0304 	and.w	r3, r3, #4
 800164c:	2b00      	cmp	r3, #0
 800164e:	f000 80a6 	beq.w	800179e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001656:	4b8b      	ldr	r3, [pc, #556]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d10d      	bne.n	800167e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001662:	4b88      	ldr	r3, [pc, #544]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	4a87      	ldr	r2, [pc, #540]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800166c:	61d3      	str	r3, [r2, #28]
 800166e:	4b85      	ldr	r3, [pc, #532]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800167a:	2301      	movs	r3, #1
 800167c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800167e:	4b82      	ldr	r3, [pc, #520]	; (8001888 <HAL_RCC_OscConfig+0x4c8>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001686:	2b00      	cmp	r3, #0
 8001688:	d118      	bne.n	80016bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800168a:	4b7f      	ldr	r3, [pc, #508]	; (8001888 <HAL_RCC_OscConfig+0x4c8>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a7e      	ldr	r2, [pc, #504]	; (8001888 <HAL_RCC_OscConfig+0x4c8>)
 8001690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001694:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001696:	f7ff fd85 	bl	80011a4 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800169e:	f7ff fd81 	bl	80011a4 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b64      	cmp	r3, #100	; 0x64
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e103      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b0:	4b75      	ldr	r3, [pc, #468]	; (8001888 <HAL_RCC_OscConfig+0x4c8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d106      	bne.n	80016d2 <HAL_RCC_OscConfig+0x312>
 80016c4:	4b6f      	ldr	r3, [pc, #444]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4a6e      	ldr	r2, [pc, #440]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6213      	str	r3, [r2, #32]
 80016d0:	e02d      	b.n	800172e <HAL_RCC_OscConfig+0x36e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d10c      	bne.n	80016f4 <HAL_RCC_OscConfig+0x334>
 80016da:	4b6a      	ldr	r3, [pc, #424]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	4a69      	ldr	r2, [pc, #420]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	f023 0301 	bic.w	r3, r3, #1
 80016e4:	6213      	str	r3, [r2, #32]
 80016e6:	4b67      	ldr	r3, [pc, #412]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4a66      	ldr	r2, [pc, #408]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 80016ec:	f023 0304 	bic.w	r3, r3, #4
 80016f0:	6213      	str	r3, [r2, #32]
 80016f2:	e01c      	b.n	800172e <HAL_RCC_OscConfig+0x36e>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	2b05      	cmp	r3, #5
 80016fa:	d10c      	bne.n	8001716 <HAL_RCC_OscConfig+0x356>
 80016fc:	4b61      	ldr	r3, [pc, #388]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	4a60      	ldr	r2, [pc, #384]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001702:	f043 0304 	orr.w	r3, r3, #4
 8001706:	6213      	str	r3, [r2, #32]
 8001708:	4b5e      	ldr	r3, [pc, #376]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	4a5d      	ldr	r2, [pc, #372]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	6213      	str	r3, [r2, #32]
 8001714:	e00b      	b.n	800172e <HAL_RCC_OscConfig+0x36e>
 8001716:	4b5b      	ldr	r3, [pc, #364]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4a5a      	ldr	r2, [pc, #360]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	f023 0301 	bic.w	r3, r3, #1
 8001720:	6213      	str	r3, [r2, #32]
 8001722:	4b58      	ldr	r3, [pc, #352]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	4a57      	ldr	r2, [pc, #348]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	f023 0304 	bic.w	r3, r3, #4
 800172c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68db      	ldr	r3, [r3, #12]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d015      	beq.n	8001762 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001736:	f7ff fd35 	bl	80011a4 <HAL_GetTick>
 800173a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173c:	e00a      	b.n	8001754 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800173e:	f7ff fd31 	bl	80011a4 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	1ad3      	subs	r3, r2, r3
 8001748:	f241 3288 	movw	r2, #5000	; 0x1388
 800174c:	4293      	cmp	r3, r2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e0b1      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001754:	4b4b      	ldr	r3, [pc, #300]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001756:	6a1b      	ldr	r3, [r3, #32]
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d0ee      	beq.n	800173e <HAL_RCC_OscConfig+0x37e>
 8001760:	e014      	b.n	800178c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001762:	f7ff fd1f 	bl	80011a4 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800176a:	f7ff fd1b 	bl	80011a4 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	f241 3288 	movw	r2, #5000	; 0x1388
 8001778:	4293      	cmp	r3, r2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e09b      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001780:	4b40      	ldr	r3, [pc, #256]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d1ee      	bne.n	800176a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800178c:	7dfb      	ldrb	r3, [r7, #23]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d105      	bne.n	800179e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001792:	4b3c      	ldr	r3, [pc, #240]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	4a3b      	ldr	r2, [pc, #236]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800179c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 8087 	beq.w	80018b6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017a8:	4b36      	ldr	r3, [pc, #216]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d061      	beq.n	8001878 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d146      	bne.n	800184a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017bc:	4b33      	ldr	r3, [pc, #204]	; (800188c <HAL_RCC_OscConfig+0x4cc>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7ff fcef 	bl	80011a4 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ca:	f7ff fceb 	bl	80011a4 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e06d      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017dc:	4b29      	ldr	r3, [pc, #164]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d1f0      	bne.n	80017ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f0:	d108      	bne.n	8001804 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017f2:	4b24      	ldr	r3, [pc, #144]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	4921      	ldr	r1, [pc, #132]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001804:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a19      	ldr	r1, [r3, #32]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	430b      	orrs	r3, r1
 8001816:	491b      	ldr	r1, [pc, #108]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 8001818:	4313      	orrs	r3, r2
 800181a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800181c:	4b1b      	ldr	r3, [pc, #108]	; (800188c <HAL_RCC_OscConfig+0x4cc>)
 800181e:	2201      	movs	r2, #1
 8001820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001822:	f7ff fcbf 	bl	80011a4 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182a:	f7ff fcbb 	bl	80011a4 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e03d      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800183c:	4b11      	ldr	r3, [pc, #68]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0x46a>
 8001848:	e035      	b.n	80018b6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <HAL_RCC_OscConfig+0x4cc>)
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001850:	f7ff fca8 	bl	80011a4 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001858:	f7ff fca4 	bl	80011a4 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b02      	cmp	r3, #2
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e026      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1f0      	bne.n	8001858 <HAL_RCC_OscConfig+0x498>
 8001876:	e01e      	b.n	80018b6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d107      	bne.n	8001890 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e019      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
 8001884:	40021000 	.word	0x40021000
 8001888:	40007000 	.word	0x40007000
 800188c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_RCC_OscConfig+0x500>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1b      	ldr	r3, [r3, #32]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d106      	bne.n	80018b2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d001      	beq.n	80018b6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e000      	b.n	80018b8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40021000 	.word	0x40021000

080018c4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d101      	bne.n	80018d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e0d0      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018d8:	4b6a      	ldr	r3, [pc, #424]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d910      	bls.n	8001908 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b67      	ldr	r3, [pc, #412]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 0207 	bic.w	r2, r3, #7
 80018ee:	4965      	ldr	r1, [pc, #404]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018f6:	4b63      	ldr	r3, [pc, #396]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	683a      	ldr	r2, [r7, #0]
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e0b8      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b00      	cmp	r3, #0
 8001912:	d020      	beq.n	8001956 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001920:	4b59      	ldr	r3, [pc, #356]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	4a58      	ldr	r2, [pc, #352]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001926:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800192a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0308 	and.w	r3, r3, #8
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001938:	4b53      	ldr	r3, [pc, #332]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	4a52      	ldr	r2, [pc, #328]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001942:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001944:	4b50      	ldr	r3, [pc, #320]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	494d      	ldr	r1, [pc, #308]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	4313      	orrs	r3, r2
 8001954:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d040      	beq.n	80019e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d107      	bne.n	800197a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	4b47      	ldr	r3, [pc, #284]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d115      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e07f      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d107      	bne.n	8001992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001982:	4b41      	ldr	r3, [pc, #260]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d109      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e073      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001992:	4b3d      	ldr	r3, [pc, #244]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d101      	bne.n	80019a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e06b      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019a2:	4b39      	ldr	r3, [pc, #228]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f023 0203 	bic.w	r2, r3, #3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	4936      	ldr	r1, [pc, #216]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b4:	f7ff fbf6 	bl	80011a4 <HAL_GetTick>
 80019b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ba:	e00a      	b.n	80019d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019bc:	f7ff fbf2 	bl	80011a4 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e053      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019d2:	4b2d      	ldr	r3, [pc, #180]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 020c 	and.w	r2, r3, #12
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d1eb      	bne.n	80019bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d210      	bcs.n	8001a14 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b24      	ldr	r3, [pc, #144]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 0207 	bic.w	r2, r3, #7
 80019fa:	4922      	ldr	r1, [pc, #136]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <HAL_RCC_ClockConfig+0x1c0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d001      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e032      	b.n	8001a7a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d008      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a20:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	4916      	ldr	r1, [pc, #88]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	00db      	lsls	r3, r3, #3
 8001a4c:	490e      	ldr	r1, [pc, #56]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a52:	f000 f821 	bl	8001a98 <HAL_RCC_GetSysClockFreq>
 8001a56:	4602      	mov	r2, r0
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	091b      	lsrs	r3, r3, #4
 8001a5e:	f003 030f 	and.w	r3, r3, #15
 8001a62:	490a      	ldr	r1, [pc, #40]	; (8001a8c <HAL_RCC_ClockConfig+0x1c8>)
 8001a64:	5ccb      	ldrb	r3, [r1, r3]
 8001a66:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6a:	4a09      	ldr	r2, [pc, #36]	; (8001a90 <HAL_RCC_ClockConfig+0x1cc>)
 8001a6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a6e:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <HAL_RCC_ClockConfig+0x1d0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff faca 	bl	800100c <HAL_InitTick>

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40022000 	.word	0x40022000
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	0800484c 	.word	0x0800484c
 8001a90:	20000004 	.word	0x20000004
 8001a94:	20000008 	.word	0x20000008

08001a98 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a98:	b490      	push	{r4, r7}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a9e:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <HAL_RCC_GetSysClockFreq+0xac>)
 8001aa0:	1d3c      	adds	r4, r7, #4
 8001aa2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aa4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001aa8:	f240 2301 	movw	r3, #513	; 0x201
 8001aac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	61bb      	str	r3, [r7, #24]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ac2:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d002      	beq.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d003      	beq.n	8001ade <HAL_RCC_GetSysClockFreq+0x46>
 8001ad6:	e02b      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ad8:	4b1c      	ldr	r3, [pc, #112]	; (8001b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ada:	623b      	str	r3, [r7, #32]
      break;
 8001adc:	e02b      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	0c9b      	lsrs	r3, r3, #18
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	3328      	adds	r3, #40	; 0x28
 8001ae8:	443b      	add	r3, r7
 8001aea:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001aee:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d012      	beq.n	8001b20 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001afa:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	0c5b      	lsrs	r3, r3, #17
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	3328      	adds	r3, #40	; 0x28
 8001b06:	443b      	add	r3, r7
 8001b08:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b0c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b12:	fb03 f202 	mul.w	r2, r3, r2
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1e:	e004      	b.n	8001b2a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b24:	fb02 f303 	mul.w	r3, r2, r3
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	623b      	str	r3, [r7, #32]
      break;
 8001b2e:	e002      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b32:	623b      	str	r3, [r7, #32]
      break;
 8001b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b36:	6a3b      	ldr	r3, [r7, #32]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3728      	adds	r7, #40	; 0x28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bc90      	pop	{r4, r7}
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	080047f4 	.word	0x080047f4
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	007a1200 	.word	0x007a1200
 8001b50:	003d0900 	.word	0x003d0900

08001b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b58:	4b02      	ldr	r3, [pc, #8]	; (8001b64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	20000004 	.word	0x20000004

08001b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b6c:	f7ff fff2 	bl	8001b54 <HAL_RCC_GetHCLKFreq>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b05      	ldr	r3, [pc, #20]	; (8001b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	0a1b      	lsrs	r3, r3, #8
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	4903      	ldr	r1, [pc, #12]	; (8001b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b7e:	5ccb      	ldrb	r3, [r1, r3]
 8001b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	0800485c 	.word	0x0800485c

08001b90 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	220f      	movs	r2, #15
 8001b9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_RCC_GetClockConfig+0x58>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0203 	and.w	r2, r3, #3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bac:	4b0e      	ldr	r3, [pc, #56]	; (8001be8 <HAL_RCC_GetClockConfig+0x58>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_RCC_GetClockConfig+0x58>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <HAL_RCC_GetClockConfig+0x58>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	08db      	lsrs	r3, r3, #3
 8001bca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bd2:	4b06      	ldr	r3, [pc, #24]	; (8001bec <HAL_RCC_GetClockConfig+0x5c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0207 	and.w	r2, r3, #7
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40022000 	.word	0x40022000

08001bf0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <RCC_Delay+0x34>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <RCC_Delay+0x38>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	0a5b      	lsrs	r3, r3, #9
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	fb02 f303 	mul.w	r3, r2, r3
 8001c0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c0c:	bf00      	nop
  }
  while (Delay --);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	1e5a      	subs	r2, r3, #1
 8001c12:	60fa      	str	r2, [r7, #12]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1f9      	bne.n	8001c0c <RCC_Delay+0x1c>
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr
 8001c24:	20000004 	.word	0x20000004
 8001c28:	10624dd3 	.word	0x10624dd3

08001c2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e041      	b.n	8001cc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d106      	bne.n	8001c58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f839 	bl	8001cca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3304      	adds	r3, #4
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4610      	mov	r0, r2
 8001c6c:	f000 f9b4 	bl	8001fd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cea:	b2db      	uxtb	r3, r3
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d001      	beq.n	8001cf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e03a      	b.n	8001d6a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68da      	ldr	r2, [r3, #12]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a18      	ldr	r2, [pc, #96]	; (8001d74 <HAL_TIM_Base_Start_IT+0x98>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d00e      	beq.n	8001d34 <HAL_TIM_Base_Start_IT+0x58>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d1e:	d009      	beq.n	8001d34 <HAL_TIM_Base_Start_IT+0x58>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a14      	ldr	r2, [pc, #80]	; (8001d78 <HAL_TIM_Base_Start_IT+0x9c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d004      	beq.n	8001d34 <HAL_TIM_Base_Start_IT+0x58>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a13      	ldr	r2, [pc, #76]	; (8001d7c <HAL_TIM_Base_Start_IT+0xa0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d111      	bne.n	8001d58 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b06      	cmp	r3, #6
 8001d44:	d010      	beq.n	8001d68 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 0201 	orr.w	r2, r2, #1
 8001d54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d56:	e007      	b.n	8001d68 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0201 	orr.w	r2, r2, #1
 8001d66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	40012c00 	.word	0x40012c00
 8001d78:	40000400 	.word	0x40000400
 8001d7c:	40000800 	.word	0x40000800

08001d80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d122      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d11b      	bne.n	8001ddc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0202 	mvn.w	r2, #2
 8001dac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	699b      	ldr	r3, [r3, #24]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f8ed 	bl	8001fa2 <HAL_TIM_IC_CaptureCallback>
 8001dc8:	e005      	b.n	8001dd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8e0 	bl	8001f90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f8ef 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d122      	bne.n	8001e30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b04      	cmp	r3, #4
 8001df6:	d11b      	bne.n	8001e30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f06f 0204 	mvn.w	r2, #4
 8001e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2202      	movs	r2, #2
 8001e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f8c3 	bl	8001fa2 <HAL_TIM_IC_CaptureCallback>
 8001e1c:	e005      	b.n	8001e2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f8b6 	bl	8001f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f8c5 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d122      	bne.n	8001e84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	f003 0308 	and.w	r3, r3, #8
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d11b      	bne.n	8001e84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f06f 0208 	mvn.w	r2, #8
 8001e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2204      	movs	r2, #4
 8001e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f899 	bl	8001fa2 <HAL_TIM_IC_CaptureCallback>
 8001e70:	e005      	b.n	8001e7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f88c 	bl	8001f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f89b 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f003 0310 	and.w	r3, r3, #16
 8001e8e:	2b10      	cmp	r3, #16
 8001e90:	d122      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	2b10      	cmp	r3, #16
 8001e9e:	d11b      	bne.n	8001ed8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f06f 0210 	mvn.w	r2, #16
 8001ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2208      	movs	r2, #8
 8001eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f86f 	bl	8001fa2 <HAL_TIM_IC_CaptureCallback>
 8001ec4:	e005      	b.n	8001ed2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f862 	bl	8001f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f871 	bl	8001fb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d10e      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0301 	and.w	r3, r3, #1
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d107      	bne.n	8001f04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0201 	mvn.w	r2, #1
 8001efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff f834 	bl	8000f6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0e:	2b80      	cmp	r3, #128	; 0x80
 8001f10:	d10e      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f1c:	2b80      	cmp	r3, #128	; 0x80
 8001f1e:	d107      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f8bf 	bl	80020ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3a:	2b40      	cmp	r3, #64	; 0x40
 8001f3c:	d10e      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f48:	2b40      	cmp	r3, #64	; 0x40
 8001f4a:	d107      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f835 	bl	8001fc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	2b20      	cmp	r3, #32
 8001f68:	d10e      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0320 	and.w	r3, r3, #32
 8001f74:	2b20      	cmp	r3, #32
 8001f76:	d107      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0220 	mvn.w	r2, #32
 8001f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f88a 	bl	800209c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr

08001fd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a29      	ldr	r2, [pc, #164]	; (8002090 <TIM_Base_SetConfig+0xb8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d00b      	beq.n	8002008 <TIM_Base_SetConfig+0x30>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff6:	d007      	beq.n	8002008 <TIM_Base_SetConfig+0x30>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a26      	ldr	r2, [pc, #152]	; (8002094 <TIM_Base_SetConfig+0xbc>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d003      	beq.n	8002008 <TIM_Base_SetConfig+0x30>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a25      	ldr	r2, [pc, #148]	; (8002098 <TIM_Base_SetConfig+0xc0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d108      	bne.n	800201a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800200e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a1c      	ldr	r2, [pc, #112]	; (8002090 <TIM_Base_SetConfig+0xb8>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d00b      	beq.n	800203a <TIM_Base_SetConfig+0x62>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002028:	d007      	beq.n	800203a <TIM_Base_SetConfig+0x62>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a19      	ldr	r2, [pc, #100]	; (8002094 <TIM_Base_SetConfig+0xbc>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d003      	beq.n	800203a <TIM_Base_SetConfig+0x62>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a18      	ldr	r2, [pc, #96]	; (8002098 <TIM_Base_SetConfig+0xc0>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d108      	bne.n	800204c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4313      	orrs	r3, r2
 800204a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	4313      	orrs	r3, r2
 8002058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68fa      	ldr	r2, [r7, #12]
 800205e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a07      	ldr	r2, [pc, #28]	; (8002090 <TIM_Base_SetConfig+0xb8>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d103      	bne.n	8002080 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	691a      	ldr	r2, [r3, #16]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	615a      	str	r2, [r3, #20]
}
 8002086:	bf00      	nop
 8002088:	3714      	adds	r7, #20
 800208a:	46bd      	mov	sp, r7
 800208c:	bc80      	pop	{r7}
 800208e:	4770      	bx	lr
 8002090:	40012c00 	.word	0x40012c00
 8002094:	40000400 	.word	0x40000400
 8002098:	40000800 	.word	0x40000800

0800209c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bc80      	pop	{r7}
 80020ac:	4770      	bx	lr

080020ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020ae:	b480      	push	{r7}
 80020b0:	b083      	sub	sp, #12
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020b6:	bf00      	nop
 80020b8:	370c      	adds	r7, #12
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bc80      	pop	{r7}
 80020be:	4770      	bx	lr

080020c0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80020ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020d2:	2b84      	cmp	r3, #132	; 0x84
 80020d4:	d005      	beq.n	80020e2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80020d6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4413      	add	r3, r2
 80020de:	3303      	adds	r3, #3
 80020e0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80020e2:	68fb      	ldr	r3, [r7, #12]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr

080020ee <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020f4:	f3ef 8305 	mrs	r3, IPSR
 80020f8:	607b      	str	r3, [r7, #4]
  return(result);
 80020fa:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf14      	ite	ne
 8002100:	2301      	movne	r3, #1
 8002102:	2300      	moveq	r3, #0
 8002104:	b2db      	uxtb	r3, r3
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002114:	f001 f908 	bl	8003328 <vTaskStartScheduler>
  
  return osOK;
 8002118:	2300      	movs	r3, #0
}
 800211a:	4618      	mov	r0, r3
 800211c:	bd80      	pop	{r7, pc}

0800211e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800211e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002120:	b089      	sub	sp, #36	; 0x24
 8002122:	af04      	add	r7, sp, #16
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d020      	beq.n	8002172 <osThreadCreate+0x54>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d01c      	beq.n	8002172 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685c      	ldr	r4, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681d      	ldr	r5, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	691e      	ldr	r6, [r3, #16]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff ffb8 	bl	80020c0 <makeFreeRtosPriority>
 8002150:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800215a:	9202      	str	r2, [sp, #8]
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	9100      	str	r1, [sp, #0]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	4632      	mov	r2, r6
 8002164:	4629      	mov	r1, r5
 8002166:	4620      	mov	r0, r4
 8002168:	f000 ff08 	bl	8002f7c <xTaskCreateStatic>
 800216c:	4603      	mov	r3, r0
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	e01c      	b.n	80021ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685c      	ldr	r4, [r3, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800217e:	b29e      	uxth	r6, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff ff9a 	bl	80020c0 <makeFreeRtosPriority>
 800218c:	4602      	mov	r2, r0
 800218e:	f107 030c 	add.w	r3, r7, #12
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	9200      	str	r2, [sp, #0]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	4632      	mov	r2, r6
 800219a:	4629      	mov	r1, r5
 800219c:	4620      	mov	r0, r4
 800219e:	f000 ff49 	bl	8003034 <xTaskCreate>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d001      	beq.n	80021ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	e000      	b.n	80021ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80021ac:	68fb      	ldr	r3, [r7, #12]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3714      	adds	r7, #20
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <osDelay+0x16>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	e000      	b.n	80021ce <osDelay+0x18>
 80021cc:	2301      	movs	r3, #1
 80021ce:	4618      	mov	r0, r3
 80021d0:	f001 f876 	bl	80032c0 <vTaskDelay>
  
  return osOK;
 80021d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80021de:	b590      	push	{r4, r7, lr}
 80021e0:	b085      	sub	sp, #20
 80021e2:	af02      	add	r7, sp, #8
 80021e4:	6078      	str	r0, [r7, #4]
 80021e6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d011      	beq.n	8002214 <osMessageCreate+0x36>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00d      	beq.n	8002214 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6859      	ldr	r1, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2400      	movs	r4, #0
 800220a:	9400      	str	r4, [sp, #0]
 800220c:	f000 f9dc 	bl	80025c8 <xQueueGenericCreateStatic>
 8002210:	4603      	mov	r3, r0
 8002212:	e008      	b.n	8002226 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	4619      	mov	r1, r3
 8002220:	f000 fa49 	bl	80026b6 <xQueueGenericCreate>
 8002224:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	bd90      	pop	{r4, r7, pc}
	...

08002230 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800223c:	2300      	movs	r3, #0
 800223e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <osMessagePut+0x1e>
    ticks = 1;
 800224a:	2301      	movs	r3, #1
 800224c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800224e:	f7ff ff4e 	bl	80020ee <inHandlerMode>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d018      	beq.n	800228a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002258:	f107 0210 	add.w	r2, r7, #16
 800225c:	f107 0108 	add.w	r1, r7, #8
 8002260:	2300      	movs	r3, #0
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 fb82 	bl	800296c <xQueueGenericSendFromISR>
 8002268:	4603      	mov	r3, r0
 800226a:	2b01      	cmp	r3, #1
 800226c:	d001      	beq.n	8002272 <osMessagePut+0x42>
      return osErrorOS;
 800226e:	23ff      	movs	r3, #255	; 0xff
 8002270:	e018      	b.n	80022a4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d014      	beq.n	80022a2 <osMessagePut+0x72>
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <osMessagePut+0x7c>)
 800227a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	f3bf 8f4f 	dsb	sy
 8002284:	f3bf 8f6f 	isb	sy
 8002288:	e00b      	b.n	80022a2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800228a:	f107 0108 	add.w	r1, r7, #8
 800228e:	2300      	movs	r3, #0
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	68f8      	ldr	r0, [r7, #12]
 8002294:	f000 fa6c 	bl	8002770 <xQueueGenericSend>
 8002298:	4603      	mov	r3, r0
 800229a:	2b01      	cmp	r3, #1
 800229c:	d001      	beq.n	80022a2 <osMessagePut+0x72>
      return osErrorOS;
 800229e:	23ff      	movs	r3, #255	; 0xff
 80022a0:	e000      	b.n	80022a4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	e000ed04 	.word	0xe000ed04

080022b0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b08b      	sub	sp, #44	; 0x2c
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d10a      	bne.n	80022e0 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	617b      	str	r3, [r7, #20]
    return event;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	461c      	mov	r4, r3
 80022d2:	f107 0314 	add.w	r3, r7, #20
 80022d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80022de:	e054      	b.n	800238a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80022e0:	2300      	movs	r3, #0
 80022e2:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ee:	d103      	bne.n	80022f8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80022f0:	f04f 33ff 	mov.w	r3, #4294967295
 80022f4:	627b      	str	r3, [r7, #36]	; 0x24
 80022f6:	e009      	b.n	800230c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d006      	beq.n	800230c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <osMessageGet+0x5c>
      ticks = 1;
 8002308:	2301      	movs	r3, #1
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800230c:	f7ff feef 	bl	80020ee <inHandlerMode>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d01c      	beq.n	8002350 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002316:	f107 0220 	add.w	r2, r7, #32
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	3304      	adds	r3, #4
 8002320:	4619      	mov	r1, r3
 8002322:	68b8      	ldr	r0, [r7, #8]
 8002324:	f000 fc9a 	bl	8002c5c <xQueueReceiveFromISR>
 8002328:	4603      	mov	r3, r0
 800232a:	2b01      	cmp	r3, #1
 800232c:	d102      	bne.n	8002334 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800232e:	2310      	movs	r3, #16
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	e001      	b.n	8002338 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d01d      	beq.n	800237a <osMessageGet+0xca>
 800233e:	4b15      	ldr	r3, [pc, #84]	; (8002394 <osMessageGet+0xe4>)
 8002340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	f3bf 8f4f 	dsb	sy
 800234a:	f3bf 8f6f 	isb	sy
 800234e:	e014      	b.n	800237a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	3304      	adds	r3, #4
 8002356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002358:	4619      	mov	r1, r3
 800235a:	68b8      	ldr	r0, [r7, #8]
 800235c:	f000 fb9e 	bl	8002a9c <xQueueReceive>
 8002360:	4603      	mov	r3, r0
 8002362:	2b01      	cmp	r3, #1
 8002364:	d102      	bne.n	800236c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8002366:	2310      	movs	r3, #16
 8002368:	617b      	str	r3, [r7, #20]
 800236a:	e006      	b.n	800237a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <osMessageGet+0xc6>
 8002372:	2300      	movs	r3, #0
 8002374:	e000      	b.n	8002378 <osMessageGet+0xc8>
 8002376:	2340      	movs	r3, #64	; 0x40
 8002378:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	461c      	mov	r4, r3
 800237e:	f107 0314 	add.w	r3, r7, #20
 8002382:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002386:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	372c      	adds	r7, #44	; 0x2c
 800238e:	46bd      	mov	sp, r7
 8002390:	bd90      	pop	{r4, r7, pc}
 8002392:	bf00      	nop
 8002394:	e000ed04 	.word	0xe000ed04

08002398 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f103 0208 	add.w	r2, r3, #8
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f04f 32ff 	mov.w	r2, #4294967295
 80023b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f103 0208 	add.w	r2, r3, #8
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f103 0208 	add.w	r2, r3, #8
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr

080023ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023ee:	b480      	push	{r7}
 80023f0:	b085      	sub	sp, #20
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	601a      	str	r2, [r3, #0]
}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr

08002434 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244a:	d103      	bne.n	8002454 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	e00c      	b.n	800246e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3308      	adds	r3, #8
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	e002      	b.n	8002462 <vListInsert+0x2e>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68ba      	ldr	r2, [r7, #8]
 800246a:	429a      	cmp	r2, r3
 800246c:	d2f6      	bcs.n	800245c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	687a      	ldr	r2, [r7, #4]
 800248e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	1c5a      	adds	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	601a      	str	r2, [r3, #0]
}
 800249a:	bf00      	nop
 800249c:	3714      	adds	r7, #20
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr

080024a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6892      	ldr	r2, [r2, #8]
 80024ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	6852      	ldr	r2, [r2, #4]
 80024c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d103      	bne.n	80024d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	1e5a      	subs	r2, r3, #1
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
	...

080024f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10a      	bne.n	8002522 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800250c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002510:	f383 8811 	msr	BASEPRI, r3
 8002514:	f3bf 8f6f 	isb	sy
 8002518:	f3bf 8f4f 	dsb	sy
 800251c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800251e:	bf00      	nop
 8002520:	e7fe      	b.n	8002520 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002522:	f001 fd1b 	bl	8003f5c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252e:	68f9      	ldr	r1, [r7, #12]
 8002530:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002532:	fb01 f303 	mul.w	r3, r1, r3
 8002536:	441a      	add	r2, r3
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002552:	3b01      	subs	r3, #1
 8002554:	68f9      	ldr	r1, [r7, #12]
 8002556:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002558:	fb01 f303 	mul.w	r3, r1, r3
 800255c:	441a      	add	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	22ff      	movs	r2, #255	; 0xff
 8002566:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	22ff      	movs	r2, #255	; 0xff
 800256e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d114      	bne.n	80025a2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d01a      	beq.n	80025b6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	3310      	adds	r3, #16
 8002584:	4618      	mov	r0, r3
 8002586:	f001 f927 	bl	80037d8 <xTaskRemoveFromEventList>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d012      	beq.n	80025b6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002590:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <xQueueGenericReset+0xcc>)
 8002592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	f3bf 8f4f 	dsb	sy
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	e009      	b.n	80025b6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	3310      	adds	r3, #16
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fef6 	bl	8002398 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	3324      	adds	r3, #36	; 0x24
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff fef1 	bl	8002398 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80025b6:	f001 fd01 	bl	8003fbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80025ba:	2301      	movs	r3, #1
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	e000ed04 	.word	0xe000ed04

080025c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08e      	sub	sp, #56	; 0x38
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10a      	bne.n	80025f2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80025dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e0:	f383 8811 	msr	BASEPRI, r3
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80025ee:	bf00      	nop
 80025f0:	e7fe      	b.n	80025f0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d10a      	bne.n	800260e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80025f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fc:	f383 8811 	msr	BASEPRI, r3
 8002600:	f3bf 8f6f 	isb	sy
 8002604:	f3bf 8f4f 	dsb	sy
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
}
 800260a:	bf00      	nop
 800260c:	e7fe      	b.n	800260c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <xQueueGenericCreateStatic+0x52>
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <xQueueGenericCreateStatic+0x56>
 800261a:	2301      	movs	r3, #1
 800261c:	e000      	b.n	8002620 <xQueueGenericCreateStatic+0x58>
 800261e:	2300      	movs	r3, #0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10a      	bne.n	800263a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002628:	f383 8811 	msr	BASEPRI, r3
 800262c:	f3bf 8f6f 	isb	sy
 8002630:	f3bf 8f4f 	dsb	sy
 8002634:	623b      	str	r3, [r7, #32]
}
 8002636:	bf00      	nop
 8002638:	e7fe      	b.n	8002638 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <xQueueGenericCreateStatic+0x7e>
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <xQueueGenericCreateStatic+0x82>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <xQueueGenericCreateStatic+0x84>
 800264a:	2300      	movs	r3, #0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10a      	bne.n	8002666 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002654:	f383 8811 	msr	BASEPRI, r3
 8002658:	f3bf 8f6f 	isb	sy
 800265c:	f3bf 8f4f 	dsb	sy
 8002660:	61fb      	str	r3, [r7, #28]
}
 8002662:	bf00      	nop
 8002664:	e7fe      	b.n	8002664 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002666:	2348      	movs	r3, #72	; 0x48
 8002668:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b48      	cmp	r3, #72	; 0x48
 800266e:	d00a      	beq.n	8002686 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002674:	f383 8811 	msr	BASEPRI, r3
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	61bb      	str	r3, [r7, #24]
}
 8002682:	bf00      	nop
 8002684:	e7fe      	b.n	8002684 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800268c:	2b00      	cmp	r3, #0
 800268e:	d00d      	beq.n	80026ac <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002698:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800269c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	4613      	mov	r3, r2
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68b9      	ldr	r1, [r7, #8]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f843 	bl	8002732 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80026ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3730      	adds	r7, #48	; 0x30
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b08a      	sub	sp, #40	; 0x28
 80026ba:	af02      	add	r7, sp, #8
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	4613      	mov	r3, r2
 80026c2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10a      	bne.n	80026e0 <xQueueGenericCreate+0x2a>
	__asm volatile
 80026ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ce:	f383 8811 	msr	BASEPRI, r3
 80026d2:	f3bf 8f6f 	isb	sy
 80026d6:	f3bf 8f4f 	dsb	sy
 80026da:	613b      	str	r3, [r7, #16]
}
 80026dc:	bf00      	nop
 80026de:	e7fe      	b.n	80026de <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d102      	bne.n	80026ec <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	e004      	b.n	80026f6 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	fb02 f303 	mul.w	r3, r2, r3
 80026f4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3348      	adds	r3, #72	; 0x48
 80026fa:	4618      	mov	r0, r3
 80026fc:	f001 fd2e 	bl	800415c <pvPortMalloc>
 8002700:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00f      	beq.n	8002728 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	3348      	adds	r3, #72	; 0x48
 800270c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002716:	79fa      	ldrb	r2, [r7, #7]
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	4613      	mov	r3, r2
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f805 	bl	8002732 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002728:	69bb      	ldr	r3, [r7, #24]
	}
 800272a:	4618      	mov	r0, r3
 800272c:	3720      	adds	r7, #32
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b084      	sub	sp, #16
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	60b9      	str	r1, [r7, #8]
 800273c:	607a      	str	r2, [r7, #4]
 800273e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d103      	bne.n	800274e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	e002      	b.n	8002754 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002760:	2101      	movs	r1, #1
 8002762:	69b8      	ldr	r0, [r7, #24]
 8002764:	f7ff fec8 	bl	80024f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002768:	bf00      	nop
 800276a:	3710      	adds	r7, #16
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}

08002770 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08e      	sub	sp, #56	; 0x38
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800277e:	2300      	movs	r3, #0
 8002780:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10a      	bne.n	80027a2 <xQueueGenericSend+0x32>
	__asm volatile
 800278c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002790:	f383 8811 	msr	BASEPRI, r3
 8002794:	f3bf 8f6f 	isb	sy
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800279e:	bf00      	nop
 80027a0:	e7fe      	b.n	80027a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d103      	bne.n	80027b0 <xQueueGenericSend+0x40>
 80027a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <xQueueGenericSend+0x44>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <xQueueGenericSend+0x46>
 80027b4:	2300      	movs	r3, #0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10a      	bne.n	80027d0 <xQueueGenericSend+0x60>
	__asm volatile
 80027ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027be:	f383 8811 	msr	BASEPRI, r3
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027cc:	bf00      	nop
 80027ce:	e7fe      	b.n	80027ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d103      	bne.n	80027de <xQueueGenericSend+0x6e>
 80027d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <xQueueGenericSend+0x72>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <xQueueGenericSend+0x74>
 80027e2:	2300      	movs	r3, #0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10a      	bne.n	80027fe <xQueueGenericSend+0x8e>
	__asm volatile
 80027e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ec:	f383 8811 	msr	BASEPRI, r3
 80027f0:	f3bf 8f6f 	isb	sy
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	623b      	str	r3, [r7, #32]
}
 80027fa:	bf00      	nop
 80027fc:	e7fe      	b.n	80027fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027fe:	f001 f9af 	bl	8003b60 <xTaskGetSchedulerState>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <xQueueGenericSend+0x9e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <xQueueGenericSend+0xa2>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <xQueueGenericSend+0xa4>
 8002812:	2300      	movs	r3, #0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10a      	bne.n	800282e <xQueueGenericSend+0xbe>
	__asm volatile
 8002818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281c:	f383 8811 	msr	BASEPRI, r3
 8002820:	f3bf 8f6f 	isb	sy
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	61fb      	str	r3, [r7, #28]
}
 800282a:	bf00      	nop
 800282c:	e7fe      	b.n	800282c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800282e:	f001 fb95 	bl	8003f5c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283a:	429a      	cmp	r2, r3
 800283c:	d302      	bcc.n	8002844 <xQueueGenericSend+0xd4>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d129      	bne.n	8002898 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800284a:	f000 fa87 	bl	8002d5c <prvCopyDataToQueue>
 800284e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	2b00      	cmp	r3, #0
 8002856:	d010      	beq.n	800287a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285a:	3324      	adds	r3, #36	; 0x24
 800285c:	4618      	mov	r0, r3
 800285e:	f000 ffbb 	bl	80037d8 <xTaskRemoveFromEventList>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d013      	beq.n	8002890 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002868:	4b3f      	ldr	r3, [pc, #252]	; (8002968 <xQueueGenericSend+0x1f8>)
 800286a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	f3bf 8f4f 	dsb	sy
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	e00a      	b.n	8002890 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287c:	2b00      	cmp	r3, #0
 800287e:	d007      	beq.n	8002890 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002880:	4b39      	ldr	r3, [pc, #228]	; (8002968 <xQueueGenericSend+0x1f8>)
 8002882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002890:	f001 fb94 	bl	8003fbc <vPortExitCritical>
				return pdPASS;
 8002894:	2301      	movs	r3, #1
 8002896:	e063      	b.n	8002960 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d103      	bne.n	80028a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800289e:	f001 fb8d 	bl	8003fbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	e05c      	b.n	8002960 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d106      	bne.n	80028ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 fff3 	bl	800389c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028b6:	2301      	movs	r3, #1
 80028b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028ba:	f001 fb7f 	bl	8003fbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028be:	f000 fd9d 	bl	80033fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028c2:	f001 fb4b 	bl	8003f5c <vPortEnterCritical>
 80028c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028cc:	b25b      	sxtb	r3, r3
 80028ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d2:	d103      	bne.n	80028dc <xQueueGenericSend+0x16c>
 80028d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028e2:	b25b      	sxtb	r3, r3
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e8:	d103      	bne.n	80028f2 <xQueueGenericSend+0x182>
 80028ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028f2:	f001 fb63 	bl	8003fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028f6:	1d3a      	adds	r2, r7, #4
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 ffe2 	bl	80038c8 <xTaskCheckForTimeOut>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d124      	bne.n	8002954 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800290a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800290c:	f000 fb1e 	bl	8002f4c <prvIsQueueFull>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d018      	beq.n	8002948 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	3310      	adds	r3, #16
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	4611      	mov	r1, r2
 800291e:	4618      	mov	r0, r3
 8002920:	f000 ff36 	bl	8003790 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002926:	f000 faa9 	bl	8002e7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800292a:	f000 fd75 	bl	8003418 <xTaskResumeAll>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	f47f af7c 	bne.w	800282e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <xQueueGenericSend+0x1f8>)
 8002938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	e772      	b.n	800282e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800294a:	f000 fa97 	bl	8002e7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800294e:	f000 fd63 	bl	8003418 <xTaskResumeAll>
 8002952:	e76c      	b.n	800282e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002956:	f000 fa91 	bl	8002e7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800295a:	f000 fd5d 	bl	8003418 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800295e:	2300      	movs	r3, #0
		}
	}
}
 8002960:	4618      	mov	r0, r3
 8002962:	3738      	adds	r7, #56	; 0x38
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	e000ed04 	.word	0xe000ed04

0800296c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08e      	sub	sp, #56	; 0x38
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
 8002978:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10a      	bne.n	800299a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002988:	f383 8811 	msr	BASEPRI, r3
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	f3bf 8f4f 	dsb	sy
 8002994:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002996:	bf00      	nop
 8002998:	e7fe      	b.n	8002998 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d103      	bne.n	80029a8 <xQueueGenericSendFromISR+0x3c>
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <xQueueGenericSendFromISR+0x40>
 80029a8:	2301      	movs	r3, #1
 80029aa:	e000      	b.n	80029ae <xQueueGenericSendFromISR+0x42>
 80029ac:	2300      	movs	r3, #0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10a      	bne.n	80029c8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80029b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b6:	f383 8811 	msr	BASEPRI, r3
 80029ba:	f3bf 8f6f 	isb	sy
 80029be:	f3bf 8f4f 	dsb	sy
 80029c2:	623b      	str	r3, [r7, #32]
}
 80029c4:	bf00      	nop
 80029c6:	e7fe      	b.n	80029c6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d103      	bne.n	80029d6 <xQueueGenericSendFromISR+0x6a>
 80029ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <xQueueGenericSendFromISR+0x6e>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <xQueueGenericSendFromISR+0x70>
 80029da:	2300      	movs	r3, #0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80029e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e4:	f383 8811 	msr	BASEPRI, r3
 80029e8:	f3bf 8f6f 	isb	sy
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	61fb      	str	r3, [r7, #28]
}
 80029f2:	bf00      	nop
 80029f4:	e7fe      	b.n	80029f4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029f6:	f001 fb73 	bl	80040e0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80029fa:	f3ef 8211 	mrs	r2, BASEPRI
 80029fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a02:	f383 8811 	msr	BASEPRI, r3
 8002a06:	f3bf 8f6f 	isb	sy
 8002a0a:	f3bf 8f4f 	dsb	sy
 8002a0e:	61ba      	str	r2, [r7, #24]
 8002a10:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002a12:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d302      	bcc.n	8002a28 <xQueueGenericSendFromISR+0xbc>
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d12c      	bne.n	8002a82 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a38:	f000 f990 	bl	8002d5c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002a3c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a44:	d112      	bne.n	8002a6c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d016      	beq.n	8002a7c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a50:	3324      	adds	r3, #36	; 0x24
 8002a52:	4618      	mov	r0, r3
 8002a54:	f000 fec0 	bl	80037d8 <xTaskRemoveFromEventList>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00e      	beq.n	8002a7c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00b      	beq.n	8002a7c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	e007      	b.n	8002a7c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a70:	3301      	adds	r3, #1
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	b25a      	sxtb	r2, r3
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002a80:	e001      	b.n	8002a86 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002a82:	2300      	movs	r3, #0
 8002a84:	637b      	str	r3, [r7, #52]	; 0x34
 8002a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a88:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002a90:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3738      	adds	r7, #56	; 0x38
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08c      	sub	sp, #48	; 0x30
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10a      	bne.n	8002acc <xQueueReceive+0x30>
	__asm volatile
 8002ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aba:	f383 8811 	msr	BASEPRI, r3
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f3bf 8f4f 	dsb	sy
 8002ac6:	623b      	str	r3, [r7, #32]
}
 8002ac8:	bf00      	nop
 8002aca:	e7fe      	b.n	8002aca <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d103      	bne.n	8002ada <xQueueReceive+0x3e>
 8002ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <xQueueReceive+0x42>
 8002ada:	2301      	movs	r3, #1
 8002adc:	e000      	b.n	8002ae0 <xQueueReceive+0x44>
 8002ade:	2300      	movs	r3, #0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10a      	bne.n	8002afa <xQueueReceive+0x5e>
	__asm volatile
 8002ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae8:	f383 8811 	msr	BASEPRI, r3
 8002aec:	f3bf 8f6f 	isb	sy
 8002af0:	f3bf 8f4f 	dsb	sy
 8002af4:	61fb      	str	r3, [r7, #28]
}
 8002af6:	bf00      	nop
 8002af8:	e7fe      	b.n	8002af8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002afa:	f001 f831 	bl	8003b60 <xTaskGetSchedulerState>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d102      	bne.n	8002b0a <xQueueReceive+0x6e>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <xQueueReceive+0x72>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <xQueueReceive+0x74>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <xQueueReceive+0x8e>
	__asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	61bb      	str	r3, [r7, #24]
}
 8002b26:	bf00      	nop
 8002b28:	e7fe      	b.n	8002b28 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b2a:	f001 fa17 	bl	8003f5c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d01f      	beq.n	8002b7a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b3a:	68b9      	ldr	r1, [r7, #8]
 8002b3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b3e:	f000 f977 	bl	8002e30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b44:	1e5a      	subs	r2, r3, #1
 8002b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b48:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00f      	beq.n	8002b72 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	3310      	adds	r3, #16
 8002b56:	4618      	mov	r0, r3
 8002b58:	f000 fe3e 	bl	80037d8 <xTaskRemoveFromEventList>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d007      	beq.n	8002b72 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002b62:	4b3d      	ldr	r3, [pc, #244]	; (8002c58 <xQueueReceive+0x1bc>)
 8002b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b68:	601a      	str	r2, [r3, #0]
 8002b6a:	f3bf 8f4f 	dsb	sy
 8002b6e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002b72:	f001 fa23 	bl	8003fbc <vPortExitCritical>
				return pdPASS;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e069      	b.n	8002c4e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d103      	bne.n	8002b88 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b80:	f001 fa1c 	bl	8003fbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b84:	2300      	movs	r3, #0
 8002b86:	e062      	b.n	8002c4e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d106      	bne.n	8002b9c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b8e:	f107 0310 	add.w	r3, r7, #16
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 fe82 	bl	800389c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b9c:	f001 fa0e 	bl	8003fbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ba0:	f000 fc2c 	bl	80033fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ba4:	f001 f9da 	bl	8003f5c <vPortEnterCritical>
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002baa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bae:	b25b      	sxtb	r3, r3
 8002bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb4:	d103      	bne.n	8002bbe <xQueueReceive+0x122>
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bc4:	b25b      	sxtb	r3, r3
 8002bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bca:	d103      	bne.n	8002bd4 <xQueueReceive+0x138>
 8002bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002bd4:	f001 f9f2 	bl	8003fbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bd8:	1d3a      	adds	r2, r7, #4
 8002bda:	f107 0310 	add.w	r3, r7, #16
 8002bde:	4611      	mov	r1, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f000 fe71 	bl	80038c8 <xTaskCheckForTimeOut>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d123      	bne.n	8002c34 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bee:	f000 f997 	bl	8002f20 <prvIsQueueEmpty>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d017      	beq.n	8002c28 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfa:	3324      	adds	r3, #36	; 0x24
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 fdc5 	bl	8003790 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c08:	f000 f938 	bl	8002e7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c0c:	f000 fc04 	bl	8003418 <xTaskResumeAll>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d189      	bne.n	8002b2a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002c16:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <xQueueReceive+0x1bc>)
 8002c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	f3bf 8f6f 	isb	sy
 8002c26:	e780      	b.n	8002b2a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c2a:	f000 f927 	bl	8002e7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c2e:	f000 fbf3 	bl	8003418 <xTaskResumeAll>
 8002c32:	e77a      	b.n	8002b2a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002c34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c36:	f000 f921 	bl	8002e7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c3a:	f000 fbed 	bl	8003418 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c40:	f000 f96e 	bl	8002f20 <prvIsQueueEmpty>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f43f af6f 	beq.w	8002b2a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3730      	adds	r7, #48	; 0x30
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	e000ed04 	.word	0xe000ed04

08002c5c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08e      	sub	sp, #56	; 0x38
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10a      	bne.n	8002c88 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c76:	f383 8811 	msr	BASEPRI, r3
 8002c7a:	f3bf 8f6f 	isb	sy
 8002c7e:	f3bf 8f4f 	dsb	sy
 8002c82:	623b      	str	r3, [r7, #32]
}
 8002c84:	bf00      	nop
 8002c86:	e7fe      	b.n	8002c86 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d103      	bne.n	8002c96 <xQueueReceiveFromISR+0x3a>
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <xQueueReceiveFromISR+0x3e>
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <xQueueReceiveFromISR+0x40>
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10a      	bne.n	8002cb6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca4:	f383 8811 	msr	BASEPRI, r3
 8002ca8:	f3bf 8f6f 	isb	sy
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	61fb      	str	r3, [r7, #28]
}
 8002cb2:	bf00      	nop
 8002cb4:	e7fe      	b.n	8002cb4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cb6:	f001 fa13 	bl	80040e0 <vPortValidateInterruptPriority>
	__asm volatile
 8002cba:	f3ef 8211 	mrs	r2, BASEPRI
 8002cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc2:	f383 8811 	msr	BASEPRI, r3
 8002cc6:	f3bf 8f6f 	isb	sy
 8002cca:	f3bf 8f4f 	dsb	sy
 8002cce:	61ba      	str	r2, [r7, #24]
 8002cd0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002cd2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d02f      	beq.n	8002d42 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002cec:	68b9      	ldr	r1, [r7, #8]
 8002cee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cf0:	f000 f89e 	bl	8002e30 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf6:	1e5a      	subs	r2, r3, #1
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002cfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d04:	d112      	bne.n	8002d2c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d016      	beq.n	8002d3c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d10:	3310      	adds	r3, #16
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fd60 	bl	80037d8 <xTaskRemoveFromEventList>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00e      	beq.n	8002d3c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d00b      	beq.n	8002d3c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	e007      	b.n	8002d3c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d30:	3301      	adds	r3, #1
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	b25a      	sxtb	r2, r3
 8002d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d40:	e001      	b.n	8002d46 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	637b      	str	r3, [r7, #52]	; 0x34
 8002d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d48:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f383 8811 	msr	BASEPRI, r3
}
 8002d50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3738      	adds	r7, #56	; 0x38
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10d      	bne.n	8002d96 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d14d      	bne.n	8002e1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 ff08 	bl	8003b9c <xTaskPriorityDisinherit>
 8002d8c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	e043      	b.n	8002e1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d119      	bne.n	8002dd0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6898      	ldr	r0, [r3, #8]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	461a      	mov	r2, r3
 8002da6:	68b9      	ldr	r1, [r7, #8]
 8002da8:	f001 fbd6 	bl	8004558 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	441a      	add	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d32b      	bcc.n	8002e1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	609a      	str	r2, [r3, #8]
 8002dce:	e026      	b.n	8002e1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68d8      	ldr	r0, [r3, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd8:	461a      	mov	r2, r3
 8002dda:	68b9      	ldr	r1, [r7, #8]
 8002ddc:	f001 fbbc 	bl	8004558 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	425b      	negs	r3, r3
 8002dea:	441a      	add	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d207      	bcs.n	8002e0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	425b      	negs	r3, r3
 8002e06:	441a      	add	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d105      	bne.n	8002e1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002e26:	697b      	ldr	r3, [r7, #20]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
 8002e38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d018      	beq.n	8002e74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	441a      	add	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d303      	bcc.n	8002e64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68d9      	ldr	r1, [r3, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	6838      	ldr	r0, [r7, #0]
 8002e70:	f001 fb72 	bl	8004558 <memcpy>
	}
}
 8002e74:	bf00      	nop
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e84:	f001 f86a 	bl	8003f5c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e90:	e011      	b.n	8002eb6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d012      	beq.n	8002ec0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	3324      	adds	r3, #36	; 0x24
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fc9a 	bl	80037d8 <xTaskRemoveFromEventList>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002eaa:	f000 fd6f 	bl	800398c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	dce9      	bgt.n	8002e92 <prvUnlockQueue+0x16>
 8002ebe:	e000      	b.n	8002ec2 <prvUnlockQueue+0x46>
					break;
 8002ec0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	22ff      	movs	r2, #255	; 0xff
 8002ec6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002eca:	f001 f877 	bl	8003fbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002ece:	f001 f845 	bl	8003f5c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ed8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002eda:	e011      	b.n	8002f00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d012      	beq.n	8002f0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3310      	adds	r3, #16
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f000 fc75 	bl	80037d8 <xTaskRemoveFromEventList>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ef4:	f000 fd4a 	bl	800398c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002ef8:	7bbb      	ldrb	r3, [r7, #14]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	dce9      	bgt.n	8002edc <prvUnlockQueue+0x60>
 8002f08:	e000      	b.n	8002f0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	22ff      	movs	r2, #255	; 0xff
 8002f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002f14:	f001 f852 	bl	8003fbc <vPortExitCritical>
}
 8002f18:	bf00      	nop
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f28:	f001 f818 	bl	8003f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d102      	bne.n	8002f3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002f34:	2301      	movs	r3, #1
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	e001      	b.n	8002f3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f3e:	f001 f83d 	bl	8003fbc <vPortExitCritical>

	return xReturn;
 8002f42:	68fb      	ldr	r3, [r7, #12]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3710      	adds	r7, #16
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f54:	f001 f802 	bl	8003f5c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d102      	bne.n	8002f6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002f64:	2301      	movs	r3, #1
 8002f66:	60fb      	str	r3, [r7, #12]
 8002f68:	e001      	b.n	8002f6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f6e:	f001 f825 	bl	8003fbc <vPortExitCritical>

	return xReturn;
 8002f72:	68fb      	ldr	r3, [r7, #12]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08e      	sub	sp, #56	; 0x38
 8002f80:	af04      	add	r7, sp, #16
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10a      	bne.n	8002fa6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8002f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	623b      	str	r3, [r7, #32]
}
 8002fa2:	bf00      	nop
 8002fa4:	e7fe      	b.n	8002fa4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <xTaskCreateStatic+0x46>
	__asm volatile
 8002fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	61fb      	str	r3, [r7, #28]
}
 8002fbe:	bf00      	nop
 8002fc0:	e7fe      	b.n	8002fc0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002fc2:	23b4      	movs	r3, #180	; 0xb4
 8002fc4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	2bb4      	cmp	r3, #180	; 0xb4
 8002fca:	d00a      	beq.n	8002fe2 <xTaskCreateStatic+0x66>
	__asm volatile
 8002fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd0:	f383 8811 	msr	BASEPRI, r3
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	f3bf 8f4f 	dsb	sy
 8002fdc:	61bb      	str	r3, [r7, #24]
}
 8002fde:	bf00      	nop
 8002fe0:	e7fe      	b.n	8002fe0 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d01e      	beq.n	8003026 <xTaskCreateStatic+0xaa>
 8002fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d01b      	beq.n	8003026 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003000:	2300      	movs	r3, #0
 8003002:	9303      	str	r3, [sp, #12]
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	9302      	str	r3, [sp, #8]
 8003008:	f107 0314 	add.w	r3, r7, #20
 800300c:	9301      	str	r3, [sp, #4]
 800300e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	68b9      	ldr	r1, [r7, #8]
 8003018:	68f8      	ldr	r0, [r7, #12]
 800301a:	f000 f851 	bl	80030c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800301e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003020:	f000 f8e4 	bl	80031ec <prvAddNewTaskToReadyList>
 8003024:	e001      	b.n	800302a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800302a:	697b      	ldr	r3, [r7, #20]
	}
 800302c:	4618      	mov	r0, r3
 800302e:	3728      	adds	r7, #40	; 0x28
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08c      	sub	sp, #48	; 0x30
 8003038:	af04      	add	r7, sp, #16
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	4613      	mov	r3, r2
 8003042:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003044:	88fb      	ldrh	r3, [r7, #6]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	4618      	mov	r0, r3
 800304a:	f001 f887 	bl	800415c <pvPortMalloc>
 800304e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00e      	beq.n	8003074 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003056:	20b4      	movs	r0, #180	; 0xb4
 8003058:	f001 f880 	bl	800415c <pvPortMalloc>
 800305c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	631a      	str	r2, [r3, #48]	; 0x30
 800306a:	e005      	b.n	8003078 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800306c:	6978      	ldr	r0, [r7, #20]
 800306e:	f001 f939 	bl	80042e4 <vPortFree>
 8003072:	e001      	b.n	8003078 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003074:	2300      	movs	r3, #0
 8003076:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d017      	beq.n	80030ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003086:	88fa      	ldrh	r2, [r7, #6]
 8003088:	2300      	movs	r3, #0
 800308a:	9303      	str	r3, [sp, #12]
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003092:	9301      	str	r3, [sp, #4]
 8003094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68b9      	ldr	r1, [r7, #8]
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 f80f 	bl	80030c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030a2:	69f8      	ldr	r0, [r7, #28]
 80030a4:	f000 f8a2 	bl	80031ec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80030a8:	2301      	movs	r3, #1
 80030aa:	61bb      	str	r3, [r7, #24]
 80030ac:	e002      	b.n	80030b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80030ae:	f04f 33ff 	mov.w	r3, #4294967295
 80030b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80030b4:	69bb      	ldr	r3, [r7, #24]
	}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3720      	adds	r7, #32
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
	...

080030c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b088      	sub	sp, #32
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
 80030cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80030ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80030d8:	3b01      	subs	r3, #1
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	f023 0307 	bic.w	r3, r3, #7
 80030e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00a      	beq.n	8003108 <prvInitialiseNewTask+0x48>
	__asm volatile
 80030f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	617b      	str	r3, [r7, #20]
}
 8003104:	bf00      	nop
 8003106:	e7fe      	b.n	8003106 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003108:	2300      	movs	r3, #0
 800310a:	61fb      	str	r3, [r7, #28]
 800310c:	e012      	b.n	8003134 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	4413      	add	r3, r2
 8003114:	7819      	ldrb	r1, [r3, #0]
 8003116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	4413      	add	r3, r2
 800311c:	3334      	adds	r3, #52	; 0x34
 800311e:	460a      	mov	r2, r1
 8003120:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	4413      	add	r3, r2
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d006      	beq.n	800313c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	3301      	adds	r3, #1
 8003132:	61fb      	str	r3, [r7, #28]
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	2b0f      	cmp	r3, #15
 8003138:	d9e9      	bls.n	800310e <prvInitialiseNewTask+0x4e>
 800313a:	e000      	b.n	800313e <prvInitialiseNewTask+0x7e>
		{
			break;
 800313c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800313e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003148:	2b06      	cmp	r3, #6
 800314a:	d901      	bls.n	8003150 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800314c:	2306      	movs	r3, #6
 800314e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003154:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800315a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800315c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315e:	2200      	movs	r2, #0
 8003160:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003164:	3304      	adds	r3, #4
 8003166:	4618      	mov	r0, r3
 8003168:	f7ff f935 	bl	80023d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	3318      	adds	r3, #24
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff f930 	bl	80023d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800317a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317e:	f1c3 0207 	rsb	r2, r3, #7
 8003182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003184:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800318a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800318c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318e:	2200      	movs	r2, #0
 8003190:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003196:	2200      	movs	r2, #0
 8003198:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319e:	334c      	adds	r3, #76	; 0x4c
 80031a0:	2260      	movs	r2, #96	; 0x60
 80031a2:	2100      	movs	r1, #0
 80031a4:	4618      	mov	r0, r3
 80031a6:	f001 f9e5 	bl	8004574 <memset>
 80031aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ac:	4a0c      	ldr	r2, [pc, #48]	; (80031e0 <prvInitialiseNewTask+0x120>)
 80031ae:	651a      	str	r2, [r3, #80]	; 0x50
 80031b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b2:	4a0c      	ldr	r2, [pc, #48]	; (80031e4 <prvInitialiseNewTask+0x124>)
 80031b4:	655a      	str	r2, [r3, #84]	; 0x54
 80031b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b8:	4a0b      	ldr	r2, [pc, #44]	; (80031e8 <prvInitialiseNewTask+0x128>)
 80031ba:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	68f9      	ldr	r1, [r7, #12]
 80031c0:	69b8      	ldr	r0, [r7, #24]
 80031c2:	f000 fdd7 	bl	8003d74 <pxPortInitialiseStack>
 80031c6:	4602      	mov	r2, r0
 80031c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80031cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031d6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031d8:	bf00      	nop
 80031da:	3720      	adds	r7, #32
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	08004884 	.word	0x08004884
 80031e4:	080048a4 	.word	0x080048a4
 80031e8:	08004864 	.word	0x08004864

080031ec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80031f4:	f000 feb2 	bl	8003f5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80031f8:	4b2a      	ldr	r3, [pc, #168]	; (80032a4 <prvAddNewTaskToReadyList+0xb8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3301      	adds	r3, #1
 80031fe:	4a29      	ldr	r2, [pc, #164]	; (80032a4 <prvAddNewTaskToReadyList+0xb8>)
 8003200:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003202:	4b29      	ldr	r3, [pc, #164]	; (80032a8 <prvAddNewTaskToReadyList+0xbc>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800320a:	4a27      	ldr	r2, [pc, #156]	; (80032a8 <prvAddNewTaskToReadyList+0xbc>)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003210:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <prvAddNewTaskToReadyList+0xb8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b01      	cmp	r3, #1
 8003216:	d110      	bne.n	800323a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003218:	f000 fbdc 	bl	80039d4 <prvInitialiseTaskLists>
 800321c:	e00d      	b.n	800323a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800321e:	4b23      	ldr	r3, [pc, #140]	; (80032ac <prvAddNewTaskToReadyList+0xc0>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d109      	bne.n	800323a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003226:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <prvAddNewTaskToReadyList+0xbc>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	429a      	cmp	r2, r3
 8003232:	d802      	bhi.n	800323a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003234:	4a1c      	ldr	r2, [pc, #112]	; (80032a8 <prvAddNewTaskToReadyList+0xbc>)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800323a:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <prvAddNewTaskToReadyList+0xc4>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	3301      	adds	r3, #1
 8003240:	4a1b      	ldr	r2, [pc, #108]	; (80032b0 <prvAddNewTaskToReadyList+0xc4>)
 8003242:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003248:	2201      	movs	r2, #1
 800324a:	409a      	lsls	r2, r3
 800324c:	4b19      	ldr	r3, [pc, #100]	; (80032b4 <prvAddNewTaskToReadyList+0xc8>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4313      	orrs	r3, r2
 8003252:	4a18      	ldr	r2, [pc, #96]	; (80032b4 <prvAddNewTaskToReadyList+0xc8>)
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4a15      	ldr	r2, [pc, #84]	; (80032b8 <prvAddNewTaskToReadyList+0xcc>)
 8003264:	441a      	add	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	3304      	adds	r3, #4
 800326a:	4619      	mov	r1, r3
 800326c:	4610      	mov	r0, r2
 800326e:	f7ff f8be 	bl	80023ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003272:	f000 fea3 	bl	8003fbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003276:	4b0d      	ldr	r3, [pc, #52]	; (80032ac <prvAddNewTaskToReadyList+0xc0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00e      	beq.n	800329c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <prvAddNewTaskToReadyList+0xbc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	429a      	cmp	r2, r3
 800328a:	d207      	bcs.n	800329c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800328c:	4b0b      	ldr	r3, [pc, #44]	; (80032bc <prvAddNewTaskToReadyList+0xd0>)
 800328e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	f3bf 8f4f 	dsb	sy
 8003298:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800329c:	bf00      	nop
 800329e:	3708      	adds	r7, #8
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	200004ac 	.word	0x200004ac
 80032a8:	200003ac 	.word	0x200003ac
 80032ac:	200004b8 	.word	0x200004b8
 80032b0:	200004c8 	.word	0x200004c8
 80032b4:	200004b4 	.word	0x200004b4
 80032b8:	200003b0 	.word	0x200003b0
 80032bc:	e000ed04 	.word	0xe000ed04

080032c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d017      	beq.n	8003302 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80032d2:	4b13      	ldr	r3, [pc, #76]	; (8003320 <vTaskDelay+0x60>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <vTaskDelay+0x30>
	__asm volatile
 80032da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032de:	f383 8811 	msr	BASEPRI, r3
 80032e2:	f3bf 8f6f 	isb	sy
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	60bb      	str	r3, [r7, #8]
}
 80032ec:	bf00      	nop
 80032ee:	e7fe      	b.n	80032ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80032f0:	f000 f884 	bl	80033fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80032f4:	2100      	movs	r1, #0
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fcd6 	bl	8003ca8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80032fc:	f000 f88c 	bl	8003418 <xTaskResumeAll>
 8003300:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d107      	bne.n	8003318 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <vTaskDelay+0x64>)
 800330a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003318:	bf00      	nop
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}
 8003320:	200004d4 	.word	0x200004d4
 8003324:	e000ed04 	.word	0xe000ed04

08003328 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08a      	sub	sp, #40	; 0x28
 800332c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003332:	2300      	movs	r3, #0
 8003334:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003336:	463a      	mov	r2, r7
 8003338:	1d39      	adds	r1, r7, #4
 800333a:	f107 0308 	add.w	r3, r7, #8
 800333e:	4618      	mov	r0, r3
 8003340:	f7fc ff06 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003344:	6839      	ldr	r1, [r7, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	9202      	str	r2, [sp, #8]
 800334c:	9301      	str	r3, [sp, #4]
 800334e:	2300      	movs	r3, #0
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	2300      	movs	r3, #0
 8003354:	460a      	mov	r2, r1
 8003356:	4921      	ldr	r1, [pc, #132]	; (80033dc <vTaskStartScheduler+0xb4>)
 8003358:	4821      	ldr	r0, [pc, #132]	; (80033e0 <vTaskStartScheduler+0xb8>)
 800335a:	f7ff fe0f 	bl	8002f7c <xTaskCreateStatic>
 800335e:	4603      	mov	r3, r0
 8003360:	4a20      	ldr	r2, [pc, #128]	; (80033e4 <vTaskStartScheduler+0xbc>)
 8003362:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003364:	4b1f      	ldr	r3, [pc, #124]	; (80033e4 <vTaskStartScheduler+0xbc>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d002      	beq.n	8003372 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800336c:	2301      	movs	r3, #1
 800336e:	617b      	str	r3, [r7, #20]
 8003370:	e001      	b.n	8003376 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003372:	2300      	movs	r3, #0
 8003374:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d11b      	bne.n	80033b4 <vTaskStartScheduler+0x8c>
	__asm volatile
 800337c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003380:	f383 8811 	msr	BASEPRI, r3
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	613b      	str	r3, [r7, #16]
}
 800338e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003390:	4b15      	ldr	r3, [pc, #84]	; (80033e8 <vTaskStartScheduler+0xc0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	334c      	adds	r3, #76	; 0x4c
 8003396:	4a15      	ldr	r2, [pc, #84]	; (80033ec <vTaskStartScheduler+0xc4>)
 8003398:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800339a:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <vTaskStartScheduler+0xc8>)
 800339c:	f04f 32ff 	mov.w	r2, #4294967295
 80033a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80033a2:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <vTaskStartScheduler+0xcc>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80033a8:	4b13      	ldr	r3, [pc, #76]	; (80033f8 <vTaskStartScheduler+0xd0>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80033ae:	f000 fd63 	bl	8003e78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80033b2:	e00e      	b.n	80033d2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ba:	d10a      	bne.n	80033d2 <vTaskStartScheduler+0xaa>
	__asm volatile
 80033bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c0:	f383 8811 	msr	BASEPRI, r3
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	60fb      	str	r3, [r7, #12]
}
 80033ce:	bf00      	nop
 80033d0:	e7fe      	b.n	80033d0 <vTaskStartScheduler+0xa8>
}
 80033d2:	bf00      	nop
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	08004804 	.word	0x08004804
 80033e0:	080039a5 	.word	0x080039a5
 80033e4:	200004d0 	.word	0x200004d0
 80033e8:	200003ac 	.word	0x200003ac
 80033ec:	20000014 	.word	0x20000014
 80033f0:	200004cc 	.word	0x200004cc
 80033f4:	200004b8 	.word	0x200004b8
 80033f8:	200004b0 	.word	0x200004b0

080033fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003400:	4b04      	ldr	r3, [pc, #16]	; (8003414 <vTaskSuspendAll+0x18>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3301      	adds	r3, #1
 8003406:	4a03      	ldr	r2, [pc, #12]	; (8003414 <vTaskSuspendAll+0x18>)
 8003408:	6013      	str	r3, [r2, #0]
}
 800340a:	bf00      	nop
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	200004d4 	.word	0x200004d4

08003418 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003426:	4b41      	ldr	r3, [pc, #260]	; (800352c <xTaskResumeAll+0x114>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10a      	bne.n	8003444 <xTaskResumeAll+0x2c>
	__asm volatile
 800342e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003432:	f383 8811 	msr	BASEPRI, r3
 8003436:	f3bf 8f6f 	isb	sy
 800343a:	f3bf 8f4f 	dsb	sy
 800343e:	603b      	str	r3, [r7, #0]
}
 8003440:	bf00      	nop
 8003442:	e7fe      	b.n	8003442 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003444:	f000 fd8a 	bl	8003f5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003448:	4b38      	ldr	r3, [pc, #224]	; (800352c <xTaskResumeAll+0x114>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	3b01      	subs	r3, #1
 800344e:	4a37      	ldr	r2, [pc, #220]	; (800352c <xTaskResumeAll+0x114>)
 8003450:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003452:	4b36      	ldr	r3, [pc, #216]	; (800352c <xTaskResumeAll+0x114>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d161      	bne.n	800351e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800345a:	4b35      	ldr	r3, [pc, #212]	; (8003530 <xTaskResumeAll+0x118>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d05d      	beq.n	800351e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003462:	e02e      	b.n	80034c2 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003464:	4b33      	ldr	r3, [pc, #204]	; (8003534 <xTaskResumeAll+0x11c>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	3318      	adds	r3, #24
 8003470:	4618      	mov	r0, r3
 8003472:	f7ff f817 	bl	80024a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	3304      	adds	r3, #4
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff f812 	bl	80024a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003484:	2201      	movs	r2, #1
 8003486:	409a      	lsls	r2, r3
 8003488:	4b2b      	ldr	r3, [pc, #172]	; (8003538 <xTaskResumeAll+0x120>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4313      	orrs	r3, r2
 800348e:	4a2a      	ldr	r2, [pc, #168]	; (8003538 <xTaskResumeAll+0x120>)
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003496:	4613      	mov	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4a27      	ldr	r2, [pc, #156]	; (800353c <xTaskResumeAll+0x124>)
 80034a0:	441a      	add	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	3304      	adds	r3, #4
 80034a6:	4619      	mov	r1, r3
 80034a8:	4610      	mov	r0, r2
 80034aa:	f7fe ffa0 	bl	80023ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b2:	4b23      	ldr	r3, [pc, #140]	; (8003540 <xTaskResumeAll+0x128>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d302      	bcc.n	80034c2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80034bc:	4b21      	ldr	r3, [pc, #132]	; (8003544 <xTaskResumeAll+0x12c>)
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034c2:	4b1c      	ldr	r3, [pc, #112]	; (8003534 <xTaskResumeAll+0x11c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1cc      	bne.n	8003464 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80034d0:	f000 fb22 	bl	8003b18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80034d4:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <xTaskResumeAll+0x130>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d010      	beq.n	8003502 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80034e0:	f000 f836 	bl	8003550 <xTaskIncrementTick>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d002      	beq.n	80034f0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80034ea:	4b16      	ldr	r3, [pc, #88]	; (8003544 <xTaskResumeAll+0x12c>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f1      	bne.n	80034e0 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80034fc:	4b12      	ldr	r3, [pc, #72]	; (8003548 <xTaskResumeAll+0x130>)
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003502:	4b10      	ldr	r3, [pc, #64]	; (8003544 <xTaskResumeAll+0x12c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d009      	beq.n	800351e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800350a:	2301      	movs	r3, #1
 800350c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800350e:	4b0f      	ldr	r3, [pc, #60]	; (800354c <xTaskResumeAll+0x134>)
 8003510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003514:	601a      	str	r2, [r3, #0]
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800351e:	f000 fd4d 	bl	8003fbc <vPortExitCritical>

	return xAlreadyYielded;
 8003522:	68bb      	ldr	r3, [r7, #8]
}
 8003524:	4618      	mov	r0, r3
 8003526:	3710      	adds	r7, #16
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	200004d4 	.word	0x200004d4
 8003530:	200004ac 	.word	0x200004ac
 8003534:	2000046c 	.word	0x2000046c
 8003538:	200004b4 	.word	0x200004b4
 800353c:	200003b0 	.word	0x200003b0
 8003540:	200003ac 	.word	0x200003ac
 8003544:	200004c0 	.word	0x200004c0
 8003548:	200004bc 	.word	0x200004bc
 800354c:	e000ed04 	.word	0xe000ed04

08003550 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003556:	2300      	movs	r3, #0
 8003558:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800355a:	4b51      	ldr	r3, [pc, #324]	; (80036a0 <xTaskIncrementTick+0x150>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f040 808d 	bne.w	800367e <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003564:	4b4f      	ldr	r3, [pc, #316]	; (80036a4 <xTaskIncrementTick+0x154>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3301      	adds	r3, #1
 800356a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800356c:	4a4d      	ldr	r2, [pc, #308]	; (80036a4 <xTaskIncrementTick+0x154>)
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d120      	bne.n	80035ba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003578:	4b4b      	ldr	r3, [pc, #300]	; (80036a8 <xTaskIncrementTick+0x158>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <xTaskIncrementTick+0x48>
	__asm volatile
 8003582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003586:	f383 8811 	msr	BASEPRI, r3
 800358a:	f3bf 8f6f 	isb	sy
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	603b      	str	r3, [r7, #0]
}
 8003594:	bf00      	nop
 8003596:	e7fe      	b.n	8003596 <xTaskIncrementTick+0x46>
 8003598:	4b43      	ldr	r3, [pc, #268]	; (80036a8 <xTaskIncrementTick+0x158>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	4b43      	ldr	r3, [pc, #268]	; (80036ac <xTaskIncrementTick+0x15c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a41      	ldr	r2, [pc, #260]	; (80036a8 <xTaskIncrementTick+0x158>)
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	4a41      	ldr	r2, [pc, #260]	; (80036ac <xTaskIncrementTick+0x15c>)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	4b40      	ldr	r3, [pc, #256]	; (80036b0 <xTaskIncrementTick+0x160>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3301      	adds	r3, #1
 80035b2:	4a3f      	ldr	r2, [pc, #252]	; (80036b0 <xTaskIncrementTick+0x160>)
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	f000 faaf 	bl	8003b18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80035ba:	4b3e      	ldr	r3, [pc, #248]	; (80036b4 <xTaskIncrementTick+0x164>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d34d      	bcc.n	8003660 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035c4:	4b38      	ldr	r3, [pc, #224]	; (80036a8 <xTaskIncrementTick+0x158>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <xTaskIncrementTick+0x82>
 80035ce:	2301      	movs	r3, #1
 80035d0:	e000      	b.n	80035d4 <xTaskIncrementTick+0x84>
 80035d2:	2300      	movs	r3, #0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d004      	beq.n	80035e2 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035d8:	4b36      	ldr	r3, [pc, #216]	; (80036b4 <xTaskIncrementTick+0x164>)
 80035da:	f04f 32ff 	mov.w	r2, #4294967295
 80035de:	601a      	str	r2, [r3, #0]
					break;
 80035e0:	e03e      	b.n	8003660 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80035e2:	4b31      	ldr	r3, [pc, #196]	; (80036a8 <xTaskIncrementTick+0x158>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80035f2:	693a      	ldr	r2, [r7, #16]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d203      	bcs.n	8003602 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80035fa:	4a2e      	ldr	r2, [pc, #184]	; (80036b4 <xTaskIncrementTick+0x164>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6013      	str	r3, [r2, #0]
						break;
 8003600:	e02e      	b.n	8003660 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	3304      	adds	r3, #4
 8003606:	4618      	mov	r0, r3
 8003608:	f7fe ff4c 	bl	80024a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	2b00      	cmp	r3, #0
 8003612:	d004      	beq.n	800361e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	3318      	adds	r3, #24
 8003618:	4618      	mov	r0, r3
 800361a:	f7fe ff43 	bl	80024a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003622:	2201      	movs	r2, #1
 8003624:	409a      	lsls	r2, r3
 8003626:	4b24      	ldr	r3, [pc, #144]	; (80036b8 <xTaskIncrementTick+0x168>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4313      	orrs	r3, r2
 800362c:	4a22      	ldr	r2, [pc, #136]	; (80036b8 <xTaskIncrementTick+0x168>)
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4a1f      	ldr	r2, [pc, #124]	; (80036bc <xTaskIncrementTick+0x16c>)
 800363e:	441a      	add	r2, r3
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	3304      	adds	r3, #4
 8003644:	4619      	mov	r1, r3
 8003646:	4610      	mov	r0, r2
 8003648:	f7fe fed1 	bl	80023ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003650:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <xTaskIncrementTick+0x170>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003656:	429a      	cmp	r2, r3
 8003658:	d3b4      	bcc.n	80035c4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800365a:	2301      	movs	r3, #1
 800365c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800365e:	e7b1      	b.n	80035c4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003660:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <xTaskIncrementTick+0x170>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003666:	4915      	ldr	r1, [pc, #84]	; (80036bc <xTaskIncrementTick+0x16c>)
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b01      	cmp	r3, #1
 8003676:	d907      	bls.n	8003688 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003678:	2301      	movs	r3, #1
 800367a:	617b      	str	r3, [r7, #20]
 800367c:	e004      	b.n	8003688 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800367e:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <xTaskIncrementTick+0x174>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3301      	adds	r3, #1
 8003684:	4a0f      	ldr	r2, [pc, #60]	; (80036c4 <xTaskIncrementTick+0x174>)
 8003686:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003688:	4b0f      	ldr	r3, [pc, #60]	; (80036c8 <xTaskIncrementTick+0x178>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003690:	2301      	movs	r3, #1
 8003692:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003694:	697b      	ldr	r3, [r7, #20]
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	200004d4 	.word	0x200004d4
 80036a4:	200004b0 	.word	0x200004b0
 80036a8:	20000464 	.word	0x20000464
 80036ac:	20000468 	.word	0x20000468
 80036b0:	200004c4 	.word	0x200004c4
 80036b4:	200004cc 	.word	0x200004cc
 80036b8:	200004b4 	.word	0x200004b4
 80036bc:	200003b0 	.word	0x200003b0
 80036c0:	200003ac 	.word	0x200003ac
 80036c4:	200004bc 	.word	0x200004bc
 80036c8:	200004c0 	.word	0x200004c0

080036cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80036cc:	b480      	push	{r7}
 80036ce:	b087      	sub	sp, #28
 80036d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80036d2:	4b29      	ldr	r3, [pc, #164]	; (8003778 <vTaskSwitchContext+0xac>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80036da:	4b28      	ldr	r3, [pc, #160]	; (800377c <vTaskSwitchContext+0xb0>)
 80036dc:	2201      	movs	r2, #1
 80036de:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80036e0:	e044      	b.n	800376c <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80036e2:	4b26      	ldr	r3, [pc, #152]	; (800377c <vTaskSwitchContext+0xb0>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80036e8:	4b25      	ldr	r3, [pc, #148]	; (8003780 <vTaskSwitchContext+0xb4>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	fab3 f383 	clz	r3, r3
 80036f4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80036f6:	7afb      	ldrb	r3, [r7, #11]
 80036f8:	f1c3 031f 	rsb	r3, r3, #31
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	4921      	ldr	r1, [pc, #132]	; (8003784 <vTaskSwitchContext+0xb8>)
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10a      	bne.n	8003728 <vTaskSwitchContext+0x5c>
	__asm volatile
 8003712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	607b      	str	r3, [r7, #4]
}
 8003724:	bf00      	nop
 8003726:	e7fe      	b.n	8003726 <vTaskSwitchContext+0x5a>
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4613      	mov	r3, r2
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4a14      	ldr	r2, [pc, #80]	; (8003784 <vTaskSwitchContext+0xb8>)
 8003734:	4413      	add	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	3308      	adds	r3, #8
 800374a:	429a      	cmp	r2, r3
 800374c:	d104      	bne.n	8003758 <vTaskSwitchContext+0x8c>
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	605a      	str	r2, [r3, #4]
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	68db      	ldr	r3, [r3, #12]
 800375e:	4a0a      	ldr	r2, [pc, #40]	; (8003788 <vTaskSwitchContext+0xbc>)
 8003760:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003762:	4b09      	ldr	r3, [pc, #36]	; (8003788 <vTaskSwitchContext+0xbc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	334c      	adds	r3, #76	; 0x4c
 8003768:	4a08      	ldr	r2, [pc, #32]	; (800378c <vTaskSwitchContext+0xc0>)
 800376a:	6013      	str	r3, [r2, #0]
}
 800376c:	bf00      	nop
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	200004d4 	.word	0x200004d4
 800377c:	200004c0 	.word	0x200004c0
 8003780:	200004b4 	.word	0x200004b4
 8003784:	200003b0 	.word	0x200003b0
 8003788:	200003ac 	.word	0x200003ac
 800378c:	20000014 	.word	0x20000014

08003790 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10a      	bne.n	80037b6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80037a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	60fb      	str	r3, [r7, #12]
}
 80037b2:	bf00      	nop
 80037b4:	e7fe      	b.n	80037b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037b6:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <vTaskPlaceOnEventList+0x44>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3318      	adds	r3, #24
 80037bc:	4619      	mov	r1, r3
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fe fe38 	bl	8002434 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037c4:	2101      	movs	r1, #1
 80037c6:	6838      	ldr	r0, [r7, #0]
 80037c8:	f000 fa6e 	bl	8003ca8 <prvAddCurrentTaskToDelayedList>
}
 80037cc:	bf00      	nop
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	200003ac 	.word	0x200003ac

080037d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10a      	bne.n	8003804 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80037ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	60fb      	str	r3, [r7, #12]
}
 8003800:	bf00      	nop
 8003802:	e7fe      	b.n	8003802 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	3318      	adds	r3, #24
 8003808:	4618      	mov	r0, r3
 800380a:	f7fe fe4b 	bl	80024a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800380e:	4b1d      	ldr	r3, [pc, #116]	; (8003884 <xTaskRemoveFromEventList+0xac>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d11c      	bne.n	8003850 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	3304      	adds	r3, #4
 800381a:	4618      	mov	r0, r3
 800381c:	f7fe fe42 	bl	80024a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	2201      	movs	r2, #1
 8003826:	409a      	lsls	r2, r3
 8003828:	4b17      	ldr	r3, [pc, #92]	; (8003888 <xTaskRemoveFromEventList+0xb0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4313      	orrs	r3, r2
 800382e:	4a16      	ldr	r2, [pc, #88]	; (8003888 <xTaskRemoveFromEventList+0xb0>)
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4a13      	ldr	r2, [pc, #76]	; (800388c <xTaskRemoveFromEventList+0xb4>)
 8003840:	441a      	add	r2, r3
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	3304      	adds	r3, #4
 8003846:	4619      	mov	r1, r3
 8003848:	4610      	mov	r0, r2
 800384a:	f7fe fdd0 	bl	80023ee <vListInsertEnd>
 800384e:	e005      	b.n	800385c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	3318      	adds	r3, #24
 8003854:	4619      	mov	r1, r3
 8003856:	480e      	ldr	r0, [pc, #56]	; (8003890 <xTaskRemoveFromEventList+0xb8>)
 8003858:	f7fe fdc9 	bl	80023ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003860:	4b0c      	ldr	r3, [pc, #48]	; (8003894 <xTaskRemoveFromEventList+0xbc>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003866:	429a      	cmp	r2, r3
 8003868:	d905      	bls.n	8003876 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800386a:	2301      	movs	r3, #1
 800386c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800386e:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <xTaskRemoveFromEventList+0xc0>)
 8003870:	2201      	movs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	e001      	b.n	800387a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003876:	2300      	movs	r3, #0
 8003878:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800387a:	697b      	ldr	r3, [r7, #20]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	200004d4 	.word	0x200004d4
 8003888:	200004b4 	.word	0x200004b4
 800388c:	200003b0 	.word	0x200003b0
 8003890:	2000046c 	.word	0x2000046c
 8003894:	200003ac 	.word	0x200003ac
 8003898:	200004c0 	.word	0x200004c0

0800389c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038a4:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <vTaskInternalSetTimeOutState+0x24>)
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80038ac:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <vTaskInternalSetTimeOutState+0x28>)
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	605a      	str	r2, [r3, #4]
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	200004c4 	.word	0x200004c4
 80038c4:	200004b0 	.word	0x200004b0

080038c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10a      	bne.n	80038ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	613b      	str	r3, [r7, #16]
}
 80038ea:	bf00      	nop
 80038ec:	e7fe      	b.n	80038ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10a      	bne.n	800390a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80038f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f8:	f383 8811 	msr	BASEPRI, r3
 80038fc:	f3bf 8f6f 	isb	sy
 8003900:	f3bf 8f4f 	dsb	sy
 8003904:	60fb      	str	r3, [r7, #12]
}
 8003906:	bf00      	nop
 8003908:	e7fe      	b.n	8003908 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800390a:	f000 fb27 	bl	8003f5c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800390e:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <xTaskCheckForTimeOut+0xbc>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003926:	d102      	bne.n	800392e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003928:	2300      	movs	r3, #0
 800392a:	61fb      	str	r3, [r7, #28]
 800392c:	e023      	b.n	8003976 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	4b15      	ldr	r3, [pc, #84]	; (8003988 <xTaskCheckForTimeOut+0xc0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	429a      	cmp	r2, r3
 8003938:	d007      	beq.n	800394a <xTaskCheckForTimeOut+0x82>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	429a      	cmp	r2, r3
 8003942:	d302      	bcc.n	800394a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003944:	2301      	movs	r3, #1
 8003946:	61fb      	str	r3, [r7, #28]
 8003948:	e015      	b.n	8003976 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	429a      	cmp	r2, r3
 8003952:	d20b      	bcs.n	800396c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	1ad2      	subs	r2, r2, r3
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff ff9b 	bl	800389c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003966:	2300      	movs	r3, #0
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	e004      	b.n	8003976 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003972:	2301      	movs	r3, #1
 8003974:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003976:	f000 fb21 	bl	8003fbc <vPortExitCritical>

	return xReturn;
 800397a:	69fb      	ldr	r3, [r7, #28]
}
 800397c:	4618      	mov	r0, r3
 800397e:	3720      	adds	r7, #32
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	200004b0 	.word	0x200004b0
 8003988:	200004c4 	.word	0x200004c4

0800398c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003990:	4b03      	ldr	r3, [pc, #12]	; (80039a0 <vTaskMissedYield+0x14>)
 8003992:	2201      	movs	r2, #1
 8003994:	601a      	str	r2, [r3, #0]
}
 8003996:	bf00      	nop
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	200004c0 	.word	0x200004c0

080039a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80039ac:	f000 f852 	bl	8003a54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039b0:	4b06      	ldr	r3, [pc, #24]	; (80039cc <prvIdleTask+0x28>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d9f9      	bls.n	80039ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80039b8:	4b05      	ldr	r3, [pc, #20]	; (80039d0 <prvIdleTask+0x2c>)
 80039ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80039c8:	e7f0      	b.n	80039ac <prvIdleTask+0x8>
 80039ca:	bf00      	nop
 80039cc:	200003b0 	.word	0x200003b0
 80039d0:	e000ed04 	.word	0xe000ed04

080039d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039da:	2300      	movs	r3, #0
 80039dc:	607b      	str	r3, [r7, #4]
 80039de:	e00c      	b.n	80039fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4a12      	ldr	r2, [pc, #72]	; (8003a34 <prvInitialiseTaskLists+0x60>)
 80039ec:	4413      	add	r3, r2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7fe fcd2 	bl	8002398 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3301      	adds	r3, #1
 80039f8:	607b      	str	r3, [r7, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b06      	cmp	r3, #6
 80039fe:	d9ef      	bls.n	80039e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a00:	480d      	ldr	r0, [pc, #52]	; (8003a38 <prvInitialiseTaskLists+0x64>)
 8003a02:	f7fe fcc9 	bl	8002398 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a06:	480d      	ldr	r0, [pc, #52]	; (8003a3c <prvInitialiseTaskLists+0x68>)
 8003a08:	f7fe fcc6 	bl	8002398 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a0c:	480c      	ldr	r0, [pc, #48]	; (8003a40 <prvInitialiseTaskLists+0x6c>)
 8003a0e:	f7fe fcc3 	bl	8002398 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a12:	480c      	ldr	r0, [pc, #48]	; (8003a44 <prvInitialiseTaskLists+0x70>)
 8003a14:	f7fe fcc0 	bl	8002398 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003a18:	480b      	ldr	r0, [pc, #44]	; (8003a48 <prvInitialiseTaskLists+0x74>)
 8003a1a:	f7fe fcbd 	bl	8002398 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <prvInitialiseTaskLists+0x78>)
 8003a20:	4a05      	ldr	r2, [pc, #20]	; (8003a38 <prvInitialiseTaskLists+0x64>)
 8003a22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a24:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <prvInitialiseTaskLists+0x7c>)
 8003a26:	4a05      	ldr	r2, [pc, #20]	; (8003a3c <prvInitialiseTaskLists+0x68>)
 8003a28:	601a      	str	r2, [r3, #0]
}
 8003a2a:	bf00      	nop
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}
 8003a32:	bf00      	nop
 8003a34:	200003b0 	.word	0x200003b0
 8003a38:	2000043c 	.word	0x2000043c
 8003a3c:	20000450 	.word	0x20000450
 8003a40:	2000046c 	.word	0x2000046c
 8003a44:	20000480 	.word	0x20000480
 8003a48:	20000498 	.word	0x20000498
 8003a4c:	20000464 	.word	0x20000464
 8003a50:	20000468 	.word	0x20000468

08003a54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a5a:	e019      	b.n	8003a90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a5c:	f000 fa7e 	bl	8003f5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003a60:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <prvCheckTasksWaitingTermination+0x50>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe fd19 	bl	80024a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a72:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <prvCheckTasksWaitingTermination+0x54>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	4a0b      	ldr	r2, [pc, #44]	; (8003aa8 <prvCheckTasksWaitingTermination+0x54>)
 8003a7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <prvCheckTasksWaitingTermination+0x58>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3b01      	subs	r3, #1
 8003a82:	4a0a      	ldr	r2, [pc, #40]	; (8003aac <prvCheckTasksWaitingTermination+0x58>)
 8003a84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a86:	f000 fa99 	bl	8003fbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f810 	bl	8003ab0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a90:	4b06      	ldr	r3, [pc, #24]	; (8003aac <prvCheckTasksWaitingTermination+0x58>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e1      	bne.n	8003a5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a98:	bf00      	nop
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000480 	.word	0x20000480
 8003aa8:	200004ac 	.word	0x200004ac
 8003aac:	20000494 	.word	0x20000494

08003ab0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	334c      	adds	r3, #76	; 0x4c
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 fd6f 	bl	80045a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d108      	bne.n	8003ade <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f000 fc07 	bl	80042e4 <vPortFree>
				vPortFree( pxTCB );
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fc04 	bl	80042e4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003adc:	e018      	b.n	8003b10 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d103      	bne.n	8003af0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fbfb 	bl	80042e4 <vPortFree>
	}
 8003aee:	e00f      	b.n	8003b10 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d00a      	beq.n	8003b10 <prvDeleteTCB+0x60>
	__asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	60fb      	str	r3, [r7, #12]
}
 8003b0c:	bf00      	nop
 8003b0e:	e7fe      	b.n	8003b0e <prvDeleteTCB+0x5e>
	}
 8003b10:	bf00      	nop
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b1e:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <prvResetNextTaskUnblockTime+0x40>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d101      	bne.n	8003b2c <prvResetNextTaskUnblockTime+0x14>
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e000      	b.n	8003b2e <prvResetNextTaskUnblockTime+0x16>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d004      	beq.n	8003b3c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b32:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <prvResetNextTaskUnblockTime+0x44>)
 8003b34:	f04f 32ff 	mov.w	r2, #4294967295
 8003b38:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b3a:	e008      	b.n	8003b4e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b3c:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <prvResetNextTaskUnblockTime+0x40>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4a04      	ldr	r2, [pc, #16]	; (8003b5c <prvResetNextTaskUnblockTime+0x44>)
 8003b4c:	6013      	str	r3, [r2, #0]
}
 8003b4e:	bf00      	nop
 8003b50:	370c      	adds	r7, #12
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr
 8003b58:	20000464 	.word	0x20000464
 8003b5c:	200004cc 	.word	0x200004cc

08003b60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b66:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <xTaskGetSchedulerState+0x34>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d102      	bne.n	8003b74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	607b      	str	r3, [r7, #4]
 8003b72:	e008      	b.n	8003b86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b74:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <xTaskGetSchedulerState+0x38>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d102      	bne.n	8003b82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	607b      	str	r3, [r7, #4]
 8003b80:	e001      	b.n	8003b86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b82:	2300      	movs	r3, #0
 8003b84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b86:	687b      	ldr	r3, [r7, #4]
	}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	200004b8 	.word	0x200004b8
 8003b98:	200004d4 	.word	0x200004d4

08003b9c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d06e      	beq.n	8003c90 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003bb2:	4b3a      	ldr	r3, [pc, #232]	; (8003c9c <xTaskPriorityDisinherit+0x100>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d00a      	beq.n	8003bd2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	60fb      	str	r3, [r7, #12]
}
 8003bce:	bf00      	nop
 8003bd0:	e7fe      	b.n	8003bd0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10a      	bne.n	8003bf0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	60bb      	str	r3, [r7, #8]
}
 8003bec:	bf00      	nop
 8003bee:	e7fe      	b.n	8003bee <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf4:	1e5a      	subs	r2, r3, #1
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d044      	beq.n	8003c90 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d140      	bne.n	8003c90 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	3304      	adds	r3, #4
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fe fc46 	bl	80024a4 <uxListRemove>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d115      	bne.n	8003c4a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c22:	491f      	ldr	r1, [pc, #124]	; (8003ca0 <xTaskPriorityDisinherit+0x104>)
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <xTaskPriorityDisinherit+0xae>
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	2201      	movs	r2, #1
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43da      	mvns	r2, r3
 8003c40:	4b18      	ldr	r3, [pc, #96]	; (8003ca4 <xTaskPriorityDisinherit+0x108>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4013      	ands	r3, r2
 8003c46:	4a17      	ldr	r2, [pc, #92]	; (8003ca4 <xTaskPriorityDisinherit+0x108>)
 8003c48:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c56:	f1c3 0207 	rsb	r2, r3, #7
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c62:	2201      	movs	r2, #1
 8003c64:	409a      	lsls	r2, r3
 8003c66:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <xTaskPriorityDisinherit+0x108>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ca4 <xTaskPriorityDisinherit+0x108>)
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c74:	4613      	mov	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4a08      	ldr	r2, [pc, #32]	; (8003ca0 <xTaskPriorityDisinherit+0x104>)
 8003c7e:	441a      	add	r2, r3
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	3304      	adds	r3, #4
 8003c84:	4619      	mov	r1, r3
 8003c86:	4610      	mov	r0, r2
 8003c88:	f7fe fbb1 	bl	80023ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c90:	697b      	ldr	r3, [r7, #20]
	}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	200003ac 	.word	0x200003ac
 8003ca0:	200003b0 	.word	0x200003b0
 8003ca4:	200004b4 	.word	0x200004b4

08003ca8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003cb2:	4b29      	ldr	r3, [pc, #164]	; (8003d58 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cb8:	4b28      	ldr	r3, [pc, #160]	; (8003d5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7fe fbf0 	bl	80024a4 <uxListRemove>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10b      	bne.n	8003ce2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003cca:	4b24      	ldr	r3, [pc, #144]	; (8003d5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43da      	mvns	r2, r3
 8003cd8:	4b21      	ldr	r3, [pc, #132]	; (8003d60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	4a20      	ldr	r2, [pc, #128]	; (8003d60 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003ce0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce8:	d10a      	bne.n	8003d00 <prvAddCurrentTaskToDelayedList+0x58>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d007      	beq.n	8003d00 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cf0:	4b1a      	ldr	r3, [pc, #104]	; (8003d5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	481a      	ldr	r0, [pc, #104]	; (8003d64 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003cfa:	f7fe fb78 	bl	80023ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003cfe:	e026      	b.n	8003d4e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4413      	add	r3, r2
 8003d06:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d08:	4b14      	ldr	r3, [pc, #80]	; (8003d5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d10:	68ba      	ldr	r2, [r7, #8]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d209      	bcs.n	8003d2c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d18:	4b13      	ldr	r3, [pc, #76]	; (8003d68 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3304      	adds	r3, #4
 8003d22:	4619      	mov	r1, r3
 8003d24:	4610      	mov	r0, r2
 8003d26:	f7fe fb85 	bl	8002434 <vListInsert>
}
 8003d2a:	e010      	b.n	8003d4e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d2c:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	4b0a      	ldr	r3, [pc, #40]	; (8003d5c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3304      	adds	r3, #4
 8003d36:	4619      	mov	r1, r3
 8003d38:	4610      	mov	r0, r2
 8003d3a:	f7fe fb7b 	bl	8002434 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d3e:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d202      	bcs.n	8003d4e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003d48:	4a09      	ldr	r2, [pc, #36]	; (8003d70 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	6013      	str	r3, [r2, #0]
}
 8003d4e:	bf00      	nop
 8003d50:	3710      	adds	r7, #16
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	200004b0 	.word	0x200004b0
 8003d5c:	200003ac 	.word	0x200003ac
 8003d60:	200004b4 	.word	0x200004b4
 8003d64:	20000498 	.word	0x20000498
 8003d68:	20000468 	.word	0x20000468
 8003d6c:	20000464 	.word	0x20000464
 8003d70:	200004cc 	.word	0x200004cc

08003d74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	60f8      	str	r0, [r7, #12]
 8003d7c:	60b9      	str	r1, [r7, #8]
 8003d7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	3b04      	subs	r3, #4
 8003d84:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	3b04      	subs	r3, #4
 8003d92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	f023 0201 	bic.w	r2, r3, #1
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	3b04      	subs	r3, #4
 8003da2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003da4:	4a08      	ldr	r2, [pc, #32]	; (8003dc8 <pxPortInitialiseStack+0x54>)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	3b14      	subs	r3, #20
 8003dae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3b20      	subs	r3, #32
 8003dba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr
 8003dc8:	08003dcd 	.word	0x08003dcd

08003dcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003dd6:	4b12      	ldr	r3, [pc, #72]	; (8003e20 <prvTaskExitError+0x54>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dde:	d00a      	beq.n	8003df6 <prvTaskExitError+0x2a>
	__asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	60fb      	str	r3, [r7, #12]
}
 8003df2:	bf00      	nop
 8003df4:	e7fe      	b.n	8003df4 <prvTaskExitError+0x28>
	__asm volatile
 8003df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dfa:	f383 8811 	msr	BASEPRI, r3
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	60bb      	str	r3, [r7, #8]
}
 8003e08:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e0a:	bf00      	nop
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d0fc      	beq.n	8003e0c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e12:	bf00      	nop
 8003e14:	bf00      	nop
 8003e16:	3714      	adds	r7, #20
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bc80      	pop	{r7}
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	20000010 	.word	0x20000010
	...

08003e30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e30:	4b07      	ldr	r3, [pc, #28]	; (8003e50 <pxCurrentTCBConst2>)
 8003e32:	6819      	ldr	r1, [r3, #0]
 8003e34:	6808      	ldr	r0, [r1, #0]
 8003e36:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e3a:	f380 8809 	msr	PSP, r0
 8003e3e:	f3bf 8f6f 	isb	sy
 8003e42:	f04f 0000 	mov.w	r0, #0
 8003e46:	f380 8811 	msr	BASEPRI, r0
 8003e4a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003e4e:	4770      	bx	lr

08003e50 <pxCurrentTCBConst2>:
 8003e50:	200003ac 	.word	0x200003ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop

08003e58 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003e58:	4806      	ldr	r0, [pc, #24]	; (8003e74 <prvPortStartFirstTask+0x1c>)
 8003e5a:	6800      	ldr	r0, [r0, #0]
 8003e5c:	6800      	ldr	r0, [r0, #0]
 8003e5e:	f380 8808 	msr	MSP, r0
 8003e62:	b662      	cpsie	i
 8003e64:	b661      	cpsie	f
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	df00      	svc	0
 8003e70:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e72:	bf00      	nop
 8003e74:	e000ed08 	.word	0xe000ed08

08003e78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e7e:	4b32      	ldr	r3, [pc, #200]	; (8003f48 <xPortStartScheduler+0xd0>)
 8003e80:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	22ff      	movs	r2, #255	; 0xff
 8003e8e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e98:	78fb      	ldrb	r3, [r7, #3]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ea0:	b2da      	uxtb	r2, r3
 8003ea2:	4b2a      	ldr	r3, [pc, #168]	; (8003f4c <xPortStartScheduler+0xd4>)
 8003ea4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ea6:	4b2a      	ldr	r3, [pc, #168]	; (8003f50 <xPortStartScheduler+0xd8>)
 8003ea8:	2207      	movs	r2, #7
 8003eaa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003eac:	e009      	b.n	8003ec2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003eae:	4b28      	ldr	r3, [pc, #160]	; (8003f50 <xPortStartScheduler+0xd8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	4a26      	ldr	r2, [pc, #152]	; (8003f50 <xPortStartScheduler+0xd8>)
 8003eb6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003eb8:	78fb      	ldrb	r3, [r7, #3]
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ec2:	78fb      	ldrb	r3, [r7, #3]
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eca:	2b80      	cmp	r3, #128	; 0x80
 8003ecc:	d0ef      	beq.n	8003eae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ece:	4b20      	ldr	r3, [pc, #128]	; (8003f50 <xPortStartScheduler+0xd8>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f1c3 0307 	rsb	r3, r3, #7
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d00a      	beq.n	8003ef0 <xPortStartScheduler+0x78>
	__asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	60bb      	str	r3, [r7, #8]
}
 8003eec:	bf00      	nop
 8003eee:	e7fe      	b.n	8003eee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ef0:	4b17      	ldr	r3, [pc, #92]	; (8003f50 <xPortStartScheduler+0xd8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	4a16      	ldr	r2, [pc, #88]	; (8003f50 <xPortStartScheduler+0xd8>)
 8003ef8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003efa:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <xPortStartScheduler+0xd8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f02:	4a13      	ldr	r2, [pc, #76]	; (8003f50 <xPortStartScheduler+0xd8>)
 8003f04:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f0e:	4b11      	ldr	r3, [pc, #68]	; (8003f54 <xPortStartScheduler+0xdc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a10      	ldr	r2, [pc, #64]	; (8003f54 <xPortStartScheduler+0xdc>)
 8003f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f18:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f1a:	4b0e      	ldr	r3, [pc, #56]	; (8003f54 <xPortStartScheduler+0xdc>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a0d      	ldr	r2, [pc, #52]	; (8003f54 <xPortStartScheduler+0xdc>)
 8003f20:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f24:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f26:	f000 f8b9 	bl	800409c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f2a:	4b0b      	ldr	r3, [pc, #44]	; (8003f58 <xPortStartScheduler+0xe0>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f30:	f7ff ff92 	bl	8003e58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f34:	f7ff fbca 	bl	80036cc <vTaskSwitchContext>
	prvTaskExitError();
 8003f38:	f7ff ff48 	bl	8003dcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	e000e400 	.word	0xe000e400
 8003f4c:	200004d8 	.word	0x200004d8
 8003f50:	200004dc 	.word	0x200004dc
 8003f54:	e000ed20 	.word	0xe000ed20
 8003f58:	20000010 	.word	0x20000010

08003f5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
	__asm volatile
 8003f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f66:	f383 8811 	msr	BASEPRI, r3
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	f3bf 8f4f 	dsb	sy
 8003f72:	607b      	str	r3, [r7, #4]
}
 8003f74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f76:	4b0f      	ldr	r3, [pc, #60]	; (8003fb4 <vPortEnterCritical+0x58>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	4a0d      	ldr	r2, [pc, #52]	; (8003fb4 <vPortEnterCritical+0x58>)
 8003f7e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003f80:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <vPortEnterCritical+0x58>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d10f      	bne.n	8003fa8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <vPortEnterCritical+0x5c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <vPortEnterCritical+0x4c>
	__asm volatile
 8003f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	603b      	str	r3, [r7, #0]
}
 8003fa4:	bf00      	nop
 8003fa6:	e7fe      	b.n	8003fa6 <vPortEnterCritical+0x4a>
	}
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bc80      	pop	{r7}
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	20000010 	.word	0x20000010
 8003fb8:	e000ed04 	.word	0xe000ed04

08003fbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003fc2:	4b11      	ldr	r3, [pc, #68]	; (8004008 <vPortExitCritical+0x4c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10a      	bne.n	8003fe0 <vPortExitCritical+0x24>
	__asm volatile
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	607b      	str	r3, [r7, #4]
}
 8003fdc:	bf00      	nop
 8003fde:	e7fe      	b.n	8003fde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003fe0:	4b09      	ldr	r3, [pc, #36]	; (8004008 <vPortExitCritical+0x4c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	4a08      	ldr	r2, [pc, #32]	; (8004008 <vPortExitCritical+0x4c>)
 8003fe8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003fea:	4b07      	ldr	r3, [pc, #28]	; (8004008 <vPortExitCritical+0x4c>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d105      	bne.n	8003ffe <vPortExitCritical+0x42>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	f383 8811 	msr	BASEPRI, r3
}
 8003ffc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	bc80      	pop	{r7}
 8004006:	4770      	bx	lr
 8004008:	20000010 	.word	0x20000010
 800400c:	00000000 	.word	0x00000000

08004010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004010:	f3ef 8009 	mrs	r0, PSP
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	4b0d      	ldr	r3, [pc, #52]	; (8004050 <pxCurrentTCBConst>)
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004020:	6010      	str	r0, [r2, #0]
 8004022:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004026:	f04f 0050 	mov.w	r0, #80	; 0x50
 800402a:	f380 8811 	msr	BASEPRI, r0
 800402e:	f7ff fb4d 	bl	80036cc <vTaskSwitchContext>
 8004032:	f04f 0000 	mov.w	r0, #0
 8004036:	f380 8811 	msr	BASEPRI, r0
 800403a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800403e:	6819      	ldr	r1, [r3, #0]
 8004040:	6808      	ldr	r0, [r1, #0]
 8004042:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004046:	f380 8809 	msr	PSP, r0
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	4770      	bx	lr

08004050 <pxCurrentTCBConst>:
 8004050:	200003ac 	.word	0x200003ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop

08004058 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
	__asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	607b      	str	r3, [r7, #4]
}
 8004070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004072:	f7ff fa6d 	bl	8003550 <xTaskIncrementTick>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800407c:	4b06      	ldr	r3, [pc, #24]	; (8004098 <SysTick_Handler+0x40>)
 800407e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	2300      	movs	r3, #0
 8004086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	f383 8811 	msr	BASEPRI, r3
}
 800408e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004090:	bf00      	nop
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	e000ed04 	.word	0xe000ed04

0800409c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80040a0:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <vPortSetupTimerInterrupt+0x30>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040a6:	4b0a      	ldr	r3, [pc, #40]	; (80040d0 <vPortSetupTimerInterrupt+0x34>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040ac:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <vPortSetupTimerInterrupt+0x38>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a09      	ldr	r2, [pc, #36]	; (80040d8 <vPortSetupTimerInterrupt+0x3c>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	099b      	lsrs	r3, r3, #6
 80040b8:	4a08      	ldr	r2, [pc, #32]	; (80040dc <vPortSetupTimerInterrupt+0x40>)
 80040ba:	3b01      	subs	r3, #1
 80040bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80040be:	4b03      	ldr	r3, [pc, #12]	; (80040cc <vPortSetupTimerInterrupt+0x30>)
 80040c0:	2207      	movs	r2, #7
 80040c2:	601a      	str	r2, [r3, #0]
}
 80040c4:	bf00      	nop
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr
 80040cc:	e000e010 	.word	0xe000e010
 80040d0:	e000e018 	.word	0xe000e018
 80040d4:	20000004 	.word	0x20000004
 80040d8:	10624dd3 	.word	0x10624dd3
 80040dc:	e000e014 	.word	0xe000e014

080040e0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80040e0:	b480      	push	{r7}
 80040e2:	b085      	sub	sp, #20
 80040e4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80040e6:	f3ef 8305 	mrs	r3, IPSR
 80040ea:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2b0f      	cmp	r3, #15
 80040f0:	d914      	bls.n	800411c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80040f2:	4a16      	ldr	r2, [pc, #88]	; (800414c <vPortValidateInterruptPriority+0x6c>)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	4413      	add	r3, r2
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80040fc:	4b14      	ldr	r3, [pc, #80]	; (8004150 <vPortValidateInterruptPriority+0x70>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	7afa      	ldrb	r2, [r7, #11]
 8004102:	429a      	cmp	r2, r3
 8004104:	d20a      	bcs.n	800411c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410a:	f383 8811 	msr	BASEPRI, r3
 800410e:	f3bf 8f6f 	isb	sy
 8004112:	f3bf 8f4f 	dsb	sy
 8004116:	607b      	str	r3, [r7, #4]
}
 8004118:	bf00      	nop
 800411a:	e7fe      	b.n	800411a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800411c:	4b0d      	ldr	r3, [pc, #52]	; (8004154 <vPortValidateInterruptPriority+0x74>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004124:	4b0c      	ldr	r3, [pc, #48]	; (8004158 <vPortValidateInterruptPriority+0x78>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d90a      	bls.n	8004142 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	603b      	str	r3, [r7, #0]
}
 800413e:	bf00      	nop
 8004140:	e7fe      	b.n	8004140 <vPortValidateInterruptPriority+0x60>
	}
 8004142:	bf00      	nop
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	bc80      	pop	{r7}
 800414a:	4770      	bx	lr
 800414c:	e000e3f0 	.word	0xe000e3f0
 8004150:	200004d8 	.word	0x200004d8
 8004154:	e000ed0c 	.word	0xe000ed0c
 8004158:	200004dc 	.word	0x200004dc

0800415c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	; 0x28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004164:	2300      	movs	r3, #0
 8004166:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004168:	f7ff f948 	bl	80033fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800416c:	4b58      	ldr	r3, [pc, #352]	; (80042d0 <pvPortMalloc+0x174>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004174:	f000 f910 	bl	8004398 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004178:	4b56      	ldr	r3, [pc, #344]	; (80042d4 <pvPortMalloc+0x178>)
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4013      	ands	r3, r2
 8004180:	2b00      	cmp	r3, #0
 8004182:	f040 808e 	bne.w	80042a2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01d      	beq.n	80041c8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800418c:	2208      	movs	r2, #8
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4413      	add	r3, r2
 8004192:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	2b00      	cmp	r3, #0
 800419c:	d014      	beq.n	80041c8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f023 0307 	bic.w	r3, r3, #7
 80041a4:	3308      	adds	r3, #8
 80041a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <pvPortMalloc+0x6c>
	__asm volatile
 80041b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	617b      	str	r3, [r7, #20]
}
 80041c4:	bf00      	nop
 80041c6:	e7fe      	b.n	80041c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d069      	beq.n	80042a2 <pvPortMalloc+0x146>
 80041ce:	4b42      	ldr	r3, [pc, #264]	; (80042d8 <pvPortMalloc+0x17c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d864      	bhi.n	80042a2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80041d8:	4b40      	ldr	r3, [pc, #256]	; (80042dc <pvPortMalloc+0x180>)
 80041da:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80041dc:	4b3f      	ldr	r3, [pc, #252]	; (80042dc <pvPortMalloc+0x180>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041e2:	e004      	b.n	80041ee <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80041e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d903      	bls.n	8004200 <pvPortMalloc+0xa4>
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d1f1      	bne.n	80041e4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004200:	4b33      	ldr	r3, [pc, #204]	; (80042d0 <pvPortMalloc+0x174>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004206:	429a      	cmp	r2, r3
 8004208:	d04b      	beq.n	80042a2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2208      	movs	r2, #8
 8004210:	4413      	add	r3, r2
 8004212:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	1ad2      	subs	r2, r2, r3
 8004224:	2308      	movs	r3, #8
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	429a      	cmp	r2, r3
 800422a:	d91f      	bls.n	800426c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800422c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4413      	add	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <pvPortMalloc+0xf8>
	__asm volatile
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	613b      	str	r3, [r7, #16]
}
 8004250:	bf00      	nop
 8004252:	e7fe      	b.n	8004252 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	1ad2      	subs	r2, r2, r3
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004266:	69b8      	ldr	r0, [r7, #24]
 8004268:	f000 f8f8 	bl	800445c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800426c:	4b1a      	ldr	r3, [pc, #104]	; (80042d8 <pvPortMalloc+0x17c>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	4a18      	ldr	r2, [pc, #96]	; (80042d8 <pvPortMalloc+0x17c>)
 8004278:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800427a:	4b17      	ldr	r3, [pc, #92]	; (80042d8 <pvPortMalloc+0x17c>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	4b18      	ldr	r3, [pc, #96]	; (80042e0 <pvPortMalloc+0x184>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	429a      	cmp	r2, r3
 8004284:	d203      	bcs.n	800428e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004286:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <pvPortMalloc+0x17c>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a15      	ldr	r2, [pc, #84]	; (80042e0 <pvPortMalloc+0x184>)
 800428c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800428e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <pvPortMalloc+0x178>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	431a      	orrs	r2, r3
 8004298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80042a2:	f7ff f8b9 	bl	8003418 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00a      	beq.n	80042c6 <pvPortMalloc+0x16a>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	60fb      	str	r3, [r7, #12]
}
 80042c2:	bf00      	nop
 80042c4:	e7fe      	b.n	80042c4 <pvPortMalloc+0x168>
	return pvReturn;
 80042c6:	69fb      	ldr	r3, [r7, #28]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3728      	adds	r7, #40	; 0x28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	200010e8 	.word	0x200010e8
 80042d4:	200010f4 	.word	0x200010f4
 80042d8:	200010ec 	.word	0x200010ec
 80042dc:	200010e0 	.word	0x200010e0
 80042e0:	200010f0 	.word	0x200010f0

080042e4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d048      	beq.n	8004388 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80042f6:	2308      	movs	r3, #8
 80042f8:	425b      	negs	r3, r3
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	4413      	add	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	4b21      	ldr	r3, [pc, #132]	; (8004390 <vPortFree+0xac>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4013      	ands	r3, r2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <vPortFree+0x44>
	__asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	60fb      	str	r3, [r7, #12]
}
 8004324:	bf00      	nop
 8004326:	e7fe      	b.n	8004326 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d00a      	beq.n	8004346 <vPortFree+0x62>
	__asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	60bb      	str	r3, [r7, #8]
}
 8004342:	bf00      	nop
 8004344:	e7fe      	b.n	8004344 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	4b11      	ldr	r3, [pc, #68]	; (8004390 <vPortFree+0xac>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4013      	ands	r3, r2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d019      	beq.n	8004388 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d115      	bne.n	8004388 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <vPortFree+0xac>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	43db      	mvns	r3, r3
 8004366:	401a      	ands	r2, r3
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800436c:	f7ff f846 	bl	80033fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	4b07      	ldr	r3, [pc, #28]	; (8004394 <vPortFree+0xb0>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4413      	add	r3, r2
 800437a:	4a06      	ldr	r2, [pc, #24]	; (8004394 <vPortFree+0xb0>)
 800437c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800437e:	6938      	ldr	r0, [r7, #16]
 8004380:	f000 f86c 	bl	800445c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004384:	f7ff f848 	bl	8003418 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004388:	bf00      	nop
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	200010f4 	.word	0x200010f4
 8004394:	200010ec 	.word	0x200010ec

08004398 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800439e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80043a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80043a4:	4b27      	ldr	r3, [pc, #156]	; (8004444 <prvHeapInit+0xac>)
 80043a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f003 0307 	and.w	r3, r3, #7
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00c      	beq.n	80043cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3307      	adds	r3, #7
 80043b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0307 	bic.w	r3, r3, #7
 80043be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	4a1f      	ldr	r2, [pc, #124]	; (8004444 <prvHeapInit+0xac>)
 80043c8:	4413      	add	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80043d0:	4a1d      	ldr	r2, [pc, #116]	; (8004448 <prvHeapInit+0xb0>)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80043d6:	4b1c      	ldr	r3, [pc, #112]	; (8004448 <prvHeapInit+0xb0>)
 80043d8:	2200      	movs	r2, #0
 80043da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	4413      	add	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80043e4:	2208      	movs	r2, #8
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	1a9b      	subs	r3, r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0307 	bic.w	r3, r3, #7
 80043f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4a15      	ldr	r2, [pc, #84]	; (800444c <prvHeapInit+0xb4>)
 80043f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80043fa:	4b14      	ldr	r3, [pc, #80]	; (800444c <prvHeapInit+0xb4>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2200      	movs	r2, #0
 8004400:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004402:	4b12      	ldr	r3, [pc, #72]	; (800444c <prvHeapInit+0xb4>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2200      	movs	r2, #0
 8004408:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	1ad2      	subs	r2, r2, r3
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004418:	4b0c      	ldr	r3, [pc, #48]	; (800444c <prvHeapInit+0xb4>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4a0a      	ldr	r2, [pc, #40]	; (8004450 <prvHeapInit+0xb8>)
 8004426:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	4a09      	ldr	r2, [pc, #36]	; (8004454 <prvHeapInit+0xbc>)
 800442e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004430:	4b09      	ldr	r3, [pc, #36]	; (8004458 <prvHeapInit+0xc0>)
 8004432:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004436:	601a      	str	r2, [r3, #0]
}
 8004438:	bf00      	nop
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	200004e0 	.word	0x200004e0
 8004448:	200010e0 	.word	0x200010e0
 800444c:	200010e8 	.word	0x200010e8
 8004450:	200010f0 	.word	0x200010f0
 8004454:	200010ec 	.word	0x200010ec
 8004458:	200010f4 	.word	0x200010f4

0800445c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004464:	4b27      	ldr	r3, [pc, #156]	; (8004504 <prvInsertBlockIntoFreeList+0xa8>)
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	e002      	b.n	8004470 <prvInsertBlockIntoFreeList+0x14>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	429a      	cmp	r2, r3
 8004478:	d8f7      	bhi.n	800446a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	4413      	add	r3, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	429a      	cmp	r2, r3
 800448a:	d108      	bne.n	800449e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	441a      	add	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	441a      	add	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d118      	bne.n	80044e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	4b14      	ldr	r3, [pc, #80]	; (8004508 <prvInsertBlockIntoFreeList+0xac>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d00d      	beq.n	80044da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	441a      	add	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	e008      	b.n	80044ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80044da:	4b0b      	ldr	r3, [pc, #44]	; (8004508 <prvInsertBlockIntoFreeList+0xac>)
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	601a      	str	r2, [r3, #0]
 80044e2:	e003      	b.n	80044ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80044ec:	68fa      	ldr	r2, [r7, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d002      	beq.n	80044fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044fa:	bf00      	nop
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	bc80      	pop	{r7}
 8004502:	4770      	bx	lr
 8004504:	200010e0 	.word	0x200010e0
 8004508:	200010e8 	.word	0x200010e8

0800450c <__libc_init_array>:
 800450c:	b570      	push	{r4, r5, r6, lr}
 800450e:	2600      	movs	r6, #0
 8004510:	4d0c      	ldr	r5, [pc, #48]	; (8004544 <__libc_init_array+0x38>)
 8004512:	4c0d      	ldr	r4, [pc, #52]	; (8004548 <__libc_init_array+0x3c>)
 8004514:	1b64      	subs	r4, r4, r5
 8004516:	10a4      	asrs	r4, r4, #2
 8004518:	42a6      	cmp	r6, r4
 800451a:	d109      	bne.n	8004530 <__libc_init_array+0x24>
 800451c:	f000 f8f0 	bl	8004700 <_init>
 8004520:	2600      	movs	r6, #0
 8004522:	4d0a      	ldr	r5, [pc, #40]	; (800454c <__libc_init_array+0x40>)
 8004524:	4c0a      	ldr	r4, [pc, #40]	; (8004550 <__libc_init_array+0x44>)
 8004526:	1b64      	subs	r4, r4, r5
 8004528:	10a4      	asrs	r4, r4, #2
 800452a:	42a6      	cmp	r6, r4
 800452c:	d105      	bne.n	800453a <__libc_init_array+0x2e>
 800452e:	bd70      	pop	{r4, r5, r6, pc}
 8004530:	f855 3b04 	ldr.w	r3, [r5], #4
 8004534:	4798      	blx	r3
 8004536:	3601      	adds	r6, #1
 8004538:	e7ee      	b.n	8004518 <__libc_init_array+0xc>
 800453a:	f855 3b04 	ldr.w	r3, [r5], #4
 800453e:	4798      	blx	r3
 8004540:	3601      	adds	r6, #1
 8004542:	e7f2      	b.n	800452a <__libc_init_array+0x1e>
 8004544:	080048c4 	.word	0x080048c4
 8004548:	080048c4 	.word	0x080048c4
 800454c:	080048c4 	.word	0x080048c4
 8004550:	080048c8 	.word	0x080048c8

08004554 <__retarget_lock_acquire_recursive>:
 8004554:	4770      	bx	lr

08004556 <__retarget_lock_release_recursive>:
 8004556:	4770      	bx	lr

08004558 <memcpy>:
 8004558:	440a      	add	r2, r1
 800455a:	4291      	cmp	r1, r2
 800455c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004560:	d100      	bne.n	8004564 <memcpy+0xc>
 8004562:	4770      	bx	lr
 8004564:	b510      	push	{r4, lr}
 8004566:	f811 4b01 	ldrb.w	r4, [r1], #1
 800456a:	4291      	cmp	r1, r2
 800456c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004570:	d1f9      	bne.n	8004566 <memcpy+0xe>
 8004572:	bd10      	pop	{r4, pc}

08004574 <memset>:
 8004574:	4603      	mov	r3, r0
 8004576:	4402      	add	r2, r0
 8004578:	4293      	cmp	r3, r2
 800457a:	d100      	bne.n	800457e <memset+0xa>
 800457c:	4770      	bx	lr
 800457e:	f803 1b01 	strb.w	r1, [r3], #1
 8004582:	e7f9      	b.n	8004578 <memset+0x4>

08004584 <cleanup_glue>:
 8004584:	b538      	push	{r3, r4, r5, lr}
 8004586:	460c      	mov	r4, r1
 8004588:	6809      	ldr	r1, [r1, #0]
 800458a:	4605      	mov	r5, r0
 800458c:	b109      	cbz	r1, 8004592 <cleanup_glue+0xe>
 800458e:	f7ff fff9 	bl	8004584 <cleanup_glue>
 8004592:	4621      	mov	r1, r4
 8004594:	4628      	mov	r0, r5
 8004596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800459a:	f000 b869 	b.w	8004670 <_free_r>
	...

080045a0 <_reclaim_reent>:
 80045a0:	4b2c      	ldr	r3, [pc, #176]	; (8004654 <_reclaim_reent+0xb4>)
 80045a2:	b570      	push	{r4, r5, r6, lr}
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4604      	mov	r4, r0
 80045a8:	4283      	cmp	r3, r0
 80045aa:	d051      	beq.n	8004650 <_reclaim_reent+0xb0>
 80045ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80045ae:	b143      	cbz	r3, 80045c2 <_reclaim_reent+0x22>
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d14a      	bne.n	800464c <_reclaim_reent+0xac>
 80045b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80045b8:	6819      	ldr	r1, [r3, #0]
 80045ba:	b111      	cbz	r1, 80045c2 <_reclaim_reent+0x22>
 80045bc:	4620      	mov	r0, r4
 80045be:	f000 f857 	bl	8004670 <_free_r>
 80045c2:	6961      	ldr	r1, [r4, #20]
 80045c4:	b111      	cbz	r1, 80045cc <_reclaim_reent+0x2c>
 80045c6:	4620      	mov	r0, r4
 80045c8:	f000 f852 	bl	8004670 <_free_r>
 80045cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80045ce:	b111      	cbz	r1, 80045d6 <_reclaim_reent+0x36>
 80045d0:	4620      	mov	r0, r4
 80045d2:	f000 f84d 	bl	8004670 <_free_r>
 80045d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80045d8:	b111      	cbz	r1, 80045e0 <_reclaim_reent+0x40>
 80045da:	4620      	mov	r0, r4
 80045dc:	f000 f848 	bl	8004670 <_free_r>
 80045e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80045e2:	b111      	cbz	r1, 80045ea <_reclaim_reent+0x4a>
 80045e4:	4620      	mov	r0, r4
 80045e6:	f000 f843 	bl	8004670 <_free_r>
 80045ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80045ec:	b111      	cbz	r1, 80045f4 <_reclaim_reent+0x54>
 80045ee:	4620      	mov	r0, r4
 80045f0:	f000 f83e 	bl	8004670 <_free_r>
 80045f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80045f6:	b111      	cbz	r1, 80045fe <_reclaim_reent+0x5e>
 80045f8:	4620      	mov	r0, r4
 80045fa:	f000 f839 	bl	8004670 <_free_r>
 80045fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004600:	b111      	cbz	r1, 8004608 <_reclaim_reent+0x68>
 8004602:	4620      	mov	r0, r4
 8004604:	f000 f834 	bl	8004670 <_free_r>
 8004608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800460a:	b111      	cbz	r1, 8004612 <_reclaim_reent+0x72>
 800460c:	4620      	mov	r0, r4
 800460e:	f000 f82f 	bl	8004670 <_free_r>
 8004612:	69a3      	ldr	r3, [r4, #24]
 8004614:	b1e3      	cbz	r3, 8004650 <_reclaim_reent+0xb0>
 8004616:	4620      	mov	r0, r4
 8004618:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800461a:	4798      	blx	r3
 800461c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800461e:	b1b9      	cbz	r1, 8004650 <_reclaim_reent+0xb0>
 8004620:	4620      	mov	r0, r4
 8004622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004626:	f7ff bfad 	b.w	8004584 <cleanup_glue>
 800462a:	5949      	ldr	r1, [r1, r5]
 800462c:	b941      	cbnz	r1, 8004640 <_reclaim_reent+0xa0>
 800462e:	3504      	adds	r5, #4
 8004630:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004632:	2d80      	cmp	r5, #128	; 0x80
 8004634:	68d9      	ldr	r1, [r3, #12]
 8004636:	d1f8      	bne.n	800462a <_reclaim_reent+0x8a>
 8004638:	4620      	mov	r0, r4
 800463a:	f000 f819 	bl	8004670 <_free_r>
 800463e:	e7ba      	b.n	80045b6 <_reclaim_reent+0x16>
 8004640:	680e      	ldr	r6, [r1, #0]
 8004642:	4620      	mov	r0, r4
 8004644:	f000 f814 	bl	8004670 <_free_r>
 8004648:	4631      	mov	r1, r6
 800464a:	e7ef      	b.n	800462c <_reclaim_reent+0x8c>
 800464c:	2500      	movs	r5, #0
 800464e:	e7ef      	b.n	8004630 <_reclaim_reent+0x90>
 8004650:	bd70      	pop	{r4, r5, r6, pc}
 8004652:	bf00      	nop
 8004654:	20000014 	.word	0x20000014

08004658 <__malloc_lock>:
 8004658:	4801      	ldr	r0, [pc, #4]	; (8004660 <__malloc_lock+0x8>)
 800465a:	f7ff bf7b 	b.w	8004554 <__retarget_lock_acquire_recursive>
 800465e:	bf00      	nop
 8004660:	200010f8 	.word	0x200010f8

08004664 <__malloc_unlock>:
 8004664:	4801      	ldr	r0, [pc, #4]	; (800466c <__malloc_unlock+0x8>)
 8004666:	f7ff bf76 	b.w	8004556 <__retarget_lock_release_recursive>
 800466a:	bf00      	nop
 800466c:	200010f8 	.word	0x200010f8

08004670 <_free_r>:
 8004670:	b538      	push	{r3, r4, r5, lr}
 8004672:	4605      	mov	r5, r0
 8004674:	2900      	cmp	r1, #0
 8004676:	d040      	beq.n	80046fa <_free_r+0x8a>
 8004678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800467c:	1f0c      	subs	r4, r1, #4
 800467e:	2b00      	cmp	r3, #0
 8004680:	bfb8      	it	lt
 8004682:	18e4      	addlt	r4, r4, r3
 8004684:	f7ff ffe8 	bl	8004658 <__malloc_lock>
 8004688:	4a1c      	ldr	r2, [pc, #112]	; (80046fc <_free_r+0x8c>)
 800468a:	6813      	ldr	r3, [r2, #0]
 800468c:	b933      	cbnz	r3, 800469c <_free_r+0x2c>
 800468e:	6063      	str	r3, [r4, #4]
 8004690:	6014      	str	r4, [r2, #0]
 8004692:	4628      	mov	r0, r5
 8004694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004698:	f7ff bfe4 	b.w	8004664 <__malloc_unlock>
 800469c:	42a3      	cmp	r3, r4
 800469e:	d908      	bls.n	80046b2 <_free_r+0x42>
 80046a0:	6820      	ldr	r0, [r4, #0]
 80046a2:	1821      	adds	r1, r4, r0
 80046a4:	428b      	cmp	r3, r1
 80046a6:	bf01      	itttt	eq
 80046a8:	6819      	ldreq	r1, [r3, #0]
 80046aa:	685b      	ldreq	r3, [r3, #4]
 80046ac:	1809      	addeq	r1, r1, r0
 80046ae:	6021      	streq	r1, [r4, #0]
 80046b0:	e7ed      	b.n	800468e <_free_r+0x1e>
 80046b2:	461a      	mov	r2, r3
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	b10b      	cbz	r3, 80046bc <_free_r+0x4c>
 80046b8:	42a3      	cmp	r3, r4
 80046ba:	d9fa      	bls.n	80046b2 <_free_r+0x42>
 80046bc:	6811      	ldr	r1, [r2, #0]
 80046be:	1850      	adds	r0, r2, r1
 80046c0:	42a0      	cmp	r0, r4
 80046c2:	d10b      	bne.n	80046dc <_free_r+0x6c>
 80046c4:	6820      	ldr	r0, [r4, #0]
 80046c6:	4401      	add	r1, r0
 80046c8:	1850      	adds	r0, r2, r1
 80046ca:	4283      	cmp	r3, r0
 80046cc:	6011      	str	r1, [r2, #0]
 80046ce:	d1e0      	bne.n	8004692 <_free_r+0x22>
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	4401      	add	r1, r0
 80046d6:	6011      	str	r1, [r2, #0]
 80046d8:	6053      	str	r3, [r2, #4]
 80046da:	e7da      	b.n	8004692 <_free_r+0x22>
 80046dc:	d902      	bls.n	80046e4 <_free_r+0x74>
 80046de:	230c      	movs	r3, #12
 80046e0:	602b      	str	r3, [r5, #0]
 80046e2:	e7d6      	b.n	8004692 <_free_r+0x22>
 80046e4:	6820      	ldr	r0, [r4, #0]
 80046e6:	1821      	adds	r1, r4, r0
 80046e8:	428b      	cmp	r3, r1
 80046ea:	bf01      	itttt	eq
 80046ec:	6819      	ldreq	r1, [r3, #0]
 80046ee:	685b      	ldreq	r3, [r3, #4]
 80046f0:	1809      	addeq	r1, r1, r0
 80046f2:	6021      	streq	r1, [r4, #0]
 80046f4:	6063      	str	r3, [r4, #4]
 80046f6:	6054      	str	r4, [r2, #4]
 80046f8:	e7cb      	b.n	8004692 <_free_r+0x22>
 80046fa:	bd38      	pop	{r3, r4, r5, pc}
 80046fc:	200010fc 	.word	0x200010fc

08004700 <_init>:
 8004700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004702:	bf00      	nop
 8004704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004706:	bc08      	pop	{r3}
 8004708:	469e      	mov	lr, r3
 800470a:	4770      	bx	lr

0800470c <_fini>:
 800470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470e:	bf00      	nop
 8004710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004712:	bc08      	pop	{r3}
 8004714:	469e      	mov	lr, r3
 8004716:	4770      	bx	lr
